[{"content":"DLI 示範課程：建立 GPU 加速的檢索增強生成 (RAG) 流程 杜承翰, 資深解決方案架構師, NVIDIA\nRAG Sequence Diagram (source: https://blogs.nvidia.com.tw/blog/what-is-retrieval-augmented-generation/) 講師介紹了檢索增強生成 (RAG) 的框架，並透過 LangChain 程式碼進行實作，介紹如何建立一個完整的 RAG 流程。langchain-nvidia-ai-endpoints 整合了 LangChain 功能，可使用 NVIDIA NIM 微服務上的模型建構 applications。\nRAG 的流程包括：\n資料預處理 索引與檢索 透過 LLM 生成結果 LLM 的限制 LLM 雖然強大，但可能存在以下限制：\n過時的訓練資料 特定領域知識不足 幻覺 偏差資訊 RAG 提高 LLM 可靠性 檢索增強生成 (RAG) 是一種技術/過程，透過使用外部資料來提高生成式 AI 模型的準確性和可靠性。在企業應用範疇中，將 LLM 連接到企業資料，可以生成最新的特定領域答案。其優勢包括：\n與企業資料的交流 保護資料隱私 減輕 LLM 的幻覺 讓 LLM 優先使用相關資訊，無需重新訓練或微調模型 NVIDIA NEMO RAG 生態系統非常複雜，企業必須整合、更新和維護開源解決方案。使用 NVIDIA NeMo 可以最佳化 RAG 應用程式。\nNeMo Framework (source: https://docs.nvidia.com/nemo-framework/index.html) 評估 RAG 系統 建造出服務後，往往會碰到一個問題：如何評估模型好壞。講者介紹了以下兩種 RAG 評估方式，判斷生成結果的相關性和正確性。\nTruLens: TruLens 提供 TruRails 工具，與 NeMo Guardrails 應用程式整合，可用於評估生成結果。 RAGAS: RAGAS 可以使用 LangChain 來連接 NVIDIA AI foundation model 和 endpoint 進行評估。 📖 延伸閱讀：TruLens, RAGAS 與其他評估方法\n理解專利請求項附屬關係的自動生成模型 陳豐奇, 副所長, 國家衛生研究院\n在 IPR (Inter Partes Review) 的過程中，專利會經過多方複審，涉及到案件、法官、當事人等。這些實體關係近似於 social network，可以用 Entity Relation 表徵。\n專利請求項包括獨立項和附屬項，每一項都必須是單一完整的句子。附屬項越多，專利保護範圍越小。以下列例子說明：\nA device comprising an operating face of a front face of the device\u0026hellip; (獨立項) The device according to claim 1\u0026hellip; (附屬項) The device according to claim 2\u0026hellip; (附屬項) 第一點是獨立項，第二和第三點是附屬項。\n專利包含結構附屬 (structural dependency) 和技術附屬 (technical dependency) ，兩者都正確編寫才能形成有效的附屬項。LLM能否做到這一點呢？\n由於專利數據無法上傳至雲端，使用地端 LLM 進行微調變得尤其重要。研究中使用了不同的開源 LLM 進行微調，並評估生成的專利請求項內文。其中一項評估方法是讓三位專利工程師進行盲測，人工驗證結果。結果顯示，地端微調的 LLM 得分幾乎與 GPT-4 相當。即使是較小的模型，經過微調後也能達到與大型 LLM 相同的效果，生成出具有正確寫作風格的專利請求項。\n如何透過整合文化背景來改進大型語言模型建模 陳縕儂, 副教授, 國立台灣大學\nTaiwan-LLM 的訓練方法旨在使模型本地化，結合台灣的文化背景，並加強繁體中文的支援，提升其在地應用效果。\n台灣本土資料上進行持續預訓練 TAME (TAiwan Mixture of Experts) 計劃網羅各領域專家，蒐集來自媒體、法律、醫療、化工、製造業和遊戲等多個領域的本土資料。\nModel: Llama-3 8B \u0026amp; 70B Context Length: 8192 Long Context Extension: 64k Training Framework: Nvidia NeMo, Nvidia NeMo Megatron Inference Framework: Nvidia TensorRT-LLM Hardware: Nvidia DGX H100 on Taipei-1 Training Stack: 3D parallelism, DeepSpeed Zero, Flash Attention 降低記憶體用量並加速訓練 生成多輪 AI 對話資料進行微調 在繁體中文 LLM 競技場蒐集真實使用者的回饋，以進行模型微調。\n真實使用者互動並微調 透過 Direct Preference Optimization (DPO) 方法，根據使用者的偏好計算 maximum likelihood，最終微調 LLM。\nLLM 評估 Open Taiwan LLM Leaderboard 展示了各模型在不同任務上的表現。評估測試集包含：\nTMLU: 衡量模型理解各個領域 (國中、高中、大學、國考) 的能力。 TW Truthful QA: 評估模型以臺灣特定背景回答問題的能力。 TW Legal Eval: 評估模型對臺灣法律術語和概念的理解。 MMLU: 測試模型在英語各種任務上的表現。 探討繁中大型語言模型建構之挑戰與克服 陳宜昌, 聯發創新基地\n許大山, 創新基地負責人, 聯發科技\n聯發科與 NVIDIA 持續合作，Breeze-7B 和 BreeXe-8x7B 已上架 NVIDIA Inference Microservice (NIM) 。Breeze 模型在訓練中僅使用 2 台 H100，其性能已接近於使用 10 倍算力的 Llama3。\n挑戰與克服 缺乏 benchmark\nMediaTek Research 發布了 TC-Eval 繁體中文 LLM benchmark，提供一個全面的評估標準。\n缺乏大規模的預訓練數據\nCommon Crawl 是一個龐大的公開網絡爬蟲數據集，截至 2023 年 12 月，數據量達到 454 TB。但繁體中文的資料還是非常少。\n英文：44% 簡體中文：5% 繁體中文：0.1%\nMediaTek Research 通過多種方法收集了 1 TB 的臺灣繁體中文數據。 開源模型中支援的繁中 vocabularies 也非常少：\nLLaMA2: 563 out of 32k Mistral: 1034 out of 32k\nMediaTek Research 開發了技術，將繁體中文的 vocabularies 擴展到超過 32k。 Breeze-7B 免費開源 Source Model: Mistral 7B 繁體中文 vocabulary size 提升到 62k Inference 速度提高 2% 繁中 context length 達到 11.1k，相當於 10 頁文本 使用總計 7,000 小時 H100 預訓練 650 GB 的資料 BreeXe-8x7B Source Model: Mistral 8x7B (混合專家模型，Mixture of Experts, MoE) 繁體中文 vocabulary size 提升到 62k BreeXe 的對話能力與 GPT3.5 相當 BreeXe 在台灣知識方面優於 GPT3.5 Breezper 使用 Generative Fusion Decoding (GFD) 技術，以 Breeze-7B + Whisper 打造語音模型。\n提升同音字辨識率 提升 code switching 辨識率 實現 contextual-aware ASR 鴻海 GenAI 戰略 栗永徽, 所長, 鴻海研究院\n鴻海 AI 戰略全力投入基礎模型技術，目標打造全方位解決方案平台。憑藉鴻海集團即將建置的龐大算力，人工智慧研究所將為集團研發 FoxBrain，作為三大平台底層最重要的智慧核心。三大平台為：\nSmart Manufacturing 智慧製造 Smart EVs 智慧電動車 Smart City 智慧城市 基礎模型細節 輕量高效的 LLM：實現更快的運算速度和更低的能耗。 人類偏好對齊：確保模型能夠對齊人類偏好，並設置 model guardrail 以防止不當生成。 多模態能力：增強模型在多種模態下的表現能力，包括視覺和語音的綜合應用。 FoxBrain 目標 多模態 AI 代理人 視覺-語言 (VLM) 自駕助手 (CabinGPT) 音頻-視覺-語言 (FoxBot 機器人) 特定領域 AI 專家模型 智慧醫療 智慧辦公室 智慧工廠 智慧城市 訓練過程透過 NVIDIA 工具優化 數據構建階段：NVIDIA NeMo Curator 自動化清理、轉換和分析數據 透過優化算法提升處理速度 模型訓練階段：NVIDIA NeMo Megatron 在高品質數據上繼續預訓練 在各種下游 NLP 任務上進行微調 模型部署階段：NVIDIA Triton 推論服務器 優化 neural network 以加快執行速度 低延遲，提升性能 ","date":"2024-06-06T00:00:00Z","image":"https://andreashih.com/blog/p/2024-nvidia-ai-summit-%E7%B4%80%E9%8C%84-llm-%E8%88%87-rag-%E6%87%89%E7%94%A8/ai-summit-2_hu3b59245f2f3da6eaf09149d5eb1f54b9_259638_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/2024-nvidia-ai-summit-%E7%B4%80%E9%8C%84-llm-%E8%88%87-rag-%E6%87%89%E7%94%A8/","title":"2024 NVIDIA AI SUMMIT 紀錄 - LLM 與 RAG 應用"},{"content":"Demo Booth 會議開始前，在現場的 Demo Booth 與 NVIDIA 的各位專家交流。很佩服他們能夠清晰地講解 AI 產品的特點，並以簡明易懂的方式回答聽眾的各種問題。\nDemo Booth 現場展示的酷東西 NVIDIA Avatar Cloud Engine (ACE) for Games 玩家可以透過語音和 AI NPC 進行互動。自動語音辨識 (ASR) 模型將語音轉換成文字，再由大型語言模型 (LLM) 生成 NPC 的回覆，最後再通過文字轉語音 (TTS) 技術將回覆播放出來。角色說話時的嘴型和表情都能與語音搭配，提供了更加沉浸式和細緻的遊戲體驗。\n使用到的生成式 AI 技術有：\nNVIDIA NeMo：是一款 end-to-end cloude-native LLM 框架，可運用遊戲中的人物特色客製化調整 LLM，並且使用 NeMo Guardrails 來保護生成內容安全性。 NVIDIA Riva：用於自動語音辨識及文字轉語音，實現即時對話。 NVIDIA Omniverse Audio2Face：為遊戲角色建立臉部表情動畫。 Nvidia Inference Microservices (NIM) Gen AI Inference with NIM 💻 Demo 連結\nNIM 是專為管理和部署大型語言模型 (LLM) 而設計的微服務，提供快速穩定的框架，支援許多主流的 LLM，也包括最新加入的 Llama 3。\n除了雲端模型，NIM 也可以管理地端 fine-tuned 的模型。使用者可以一次生成多達 30 次的結果，並且能夠替換不同的參數，讓調參和監測生成結果更加便利。此外，NIM 也具備監控 latency 和 token usage 的功能，方便管理資源。\n人工智慧引領下一波工業數位化 Deepu Talla, 機器人和邊緣運算副總裁, NVIDIA\n在 AI 蓬勃發展的趨勢下，重工業也開始引入軟體，加快了工業數位化的進程。台灣正處於工業數位化的核心地帶，多家製造商 (如鴻海、台達電、和碩、緯創) 正在建設工廠的數位孿生 (Digital Twins)。\nNVIDIA 目前主要有兩大機器人平台：Isaac 和 Metropolis，本演講著重介紹 Isaac 的框架和實際應用場景。\nNVIDIA Isaac (source: https://developer.nvidia.com/isaac) NVIDIA Isaac 是用於構建 AI 機器人的開發平台，NVIDIA Isaac Sim 則是用來設計、測試和驗證機器人的平台。Isaac 機器人平台的最新功能有以下三項：\nIsaac Perceptor: 利用多重鏡頭及 3D 環繞視野，使機器人能勝任製造業生產線及物流配貨中心的工作。 Isaac Manipulator: 提供多款基礎模型，讓機器人手臂完成更多任務。 Project GR00T: 用來生成文字和圖像的模型，讓人形機器人能夠與人類互動。 利用數位孿生建造未來工廠 呂佳翰, 廠長, 緯創資通\n🎬 影片連結\n在建造未來工廠的過程中，ESG (環境、社會、治理) 是關鍵點。導入 NVIDIA 的解決方案，可以提升能源利用率，減少資源及溝通成本浪費，甚至可以克服時差問題進行遠端協作。\n緯創基於 NVIDIA Omniverse 建立了 WiDT，將 IoT 數據整合到環境中，並透過視覺化 dashboard 進行監控。NVIDIA CloudXR 則提供了強大的 XR 體驗，可以觀測未來的工廠建造。建造數位孿生，可以透過數據的 simulation 考量所有狀況，例如工廠內的熱流、功耗、空間運用等，將工廠 layout 產出最大化。\n創建數位孿生優化生產線 彭志誠, DSM 先進運營技術處長, Delta\n🎬 影片連結\n台達以環保節能為特色，專注於 power chip/device、手機被動元件等產品，涵蓋從印刷電路板 (PCB) 到半導體，再到數據中心和基礎設施的完整產業鏈。在接下來的 50 年中，台達致力於創建自動化和無碳環境，並提供智慧製造解決方案。\n面臨全球分散製造的挑戰，如何確保生產線的可持續性 (sustainability) 成為重要課題。過去需要在設計完成後才能進行現場模擬，但現在可以透過數位孿生 (digital twins) 解決方案，在虛擬環境中進行預先模擬。\n台達使用 NVIDIA Omniverse 建立了數位孿生解決方案平台，並獲得了顯著的好處：\n加速 NPI (New Product Introduction) 團隊的開發速度：透過訓練每個設備的 AI recipe，將 NPI (新產品導入) 的前置時間縮短了 10%。 目標零缺陷 (zero defects) 的品質管控：通過歷史數據分析，提高 25% 的 repair/debug efficiency，並能透過資料找到問題的 root cause，從而提升產品品質。 創新協作：通過 e-learning 系統，將作業員的培訓時間減少 30%。 賦能高效萬億參數的 AI Enabling Efficient Trillion Parameter AI Marc Hamilton, 解決方案架構與工程副總裁, NVIDIA\nEfficiency is in our DNA.\n現今 AI 計算需求呈爆炸式增長，最新模型的能耗也不斷增加中。NVIDIA 致力於應對此一挑戰，透過加速計算技術節省了時間和能源。\nAI 的發展循環有以下步驟：\n訓練模型（極限壓縮數據） 部署到雲端、機器人等 生成更多數據 微調模型 返回第一步，重新訓練 AI 的安全性與效率同樣重要。30 年前，人們認為軟體不安全，但隨著技術的進步，軟體的安全性也隨之提升。現在開發者與研究者也致力於使 AI 變得更加安全。\n建造未來可持續的人工智慧工廠 Building Sustainable AI Factories of the Future 彭志誠, DSM 先進運營技術處長, Delta\nSimon Chang, Senior Group Director, Regional System Solution, Asia Pacific \u0026amp; Japan, Cadence\nAditya Ramkrihna, General Manager, Digital Industries, Siemens Taiwan\nDion Harris, Director, Data Center \u0026amp; HPC, NVIDIA\nDelta 自 2010 年以來，台達一直致力於智慧製造和自動化，提前規劃並為未來做好準備。NVIDIA Omniverse 加速了智慧製造的進程，在 AI 工廠中，機器可以自動捕捉關鍵特徵（如參數和 signals），並運用智能技術進行自我調整。\nCadence Cadence 專注於降低功耗，致力於打造高效率且環保節能的 AI 工廠。透過 simulation 優化設計，不僅為客戶節省了成本，還改善了環境和 community 的整體品質。\nSiemens Siemens 構建數位孿生模型，資源使用更少，且能實現逼真且實時的 simulation。此外，生成式 AI 也可以應用於 PLC編程，通過自然語言替代傳統的 PLC 程式。\nAI 開發藥物新境界：如何加快 PROTAC 的設計 Chien-Ting Kao, 人工智慧副研究員, 安宏生醫\nPROTAC（Proteolysis Targeting Chimeras）是一種設計用於降解目標蛋白質的技術。PROTAC 會透過辨識目標蛋白，將其標記並引導至降解機制。\nNVIDIA 為新藥開發提供了便捷的 AI 工具：\nNVIDIA Inference Microservice (NIM) BioNeMo Microservice BioNeMo Framework 這些框架和微服務提供了許多模型，用於表徵蛋白質和生成蛋白質結構。\n在設計 PROTAC 時，需要考慮以下要素：\n合理性（validity）：確保設計出的結構是合理的。 唯一性（uniqueness）：確保生成的結構不重複。 成功的藥物分子需要能夠與兩端的蛋白質結合，以確保藥效的達成。藉由 AI 的幫助，有望在早期藥物開發階段減少研發時間和成本。\n","date":"2024-06-05T00:00:00Z","image":"https://andreashih.com/blog/p/2024-nvidia-ai-summit-%E7%B4%80%E9%8C%84-%E6%99%BA%E6%85%A7%E8%A3%BD%E9%80%A0%E8%88%87%E5%85%B6%E4%BB%96/ai-summit_hu863ab52b023c1d3676337ffd66b6297c_277338_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/2024-nvidia-ai-summit-%E7%B4%80%E9%8C%84-%E6%99%BA%E6%85%A7%E8%A3%BD%E9%80%A0%E8%88%87%E5%85%B6%E4%BB%96/","title":"2024 NVIDIA AI SUMMIT 紀錄 - 智慧製造與其他"},{"content":"Microsoft Sharepoint 是許多公司內部分享資料的平台。我們有時會需要從 Sharepoint 上取得大量資料，但是一個一個點擊下載會花很多時間。本文將介紹如何用 Python 將 Microsoft Sharepoint 的資料更快速自動地下載到本機。\n載入套件 1 2 3 !pip install python-dotenv !pip install Office365-REST-Python-Client !pip install git+https://github.com/vgrem/Office365-REST-Python-Client.git 1 2 3 4 5 6 7 8 # For office365 library from office365.runtime.auth.authentication_context import AuthenticationContext from office365.sharepoint.client_context import ClientContext from office365.sharepoint.files.file import File # For .env file import os from dotenv import load_dotenv load_dotenv() 連上 Sharepoint 為了安全可以將資訊另存在 .env 中，但要注意不要不小心上傳到 Git。\n1 2 3 SHAREPOINT_BASE_URL = # Sharepoint 連結 SHAREPOINT_USER = # 帳號 SHAREPOINT_PASSWORD = # 密碼 接著就可以使用 os.getenv() 取得 .env 中的參數。\n1 2 3 sharepoint_base_url = os.getenv(\u0026#34;SHAREPOINT_BASE_URL\u0026#34;) sharepoint_user = os.getenv(\u0026#34;SHAREPOINT_USER\u0026#34;) sharepoint_password = os.getenv(\u0026#34;SHAREPOINT_PASSWORD\u0026#34;) 連接到 Sharepoint。\n1 2 3 4 5 6 7 8 auth = AuthenticationContext(sharepoint_base_url) auth.acquire_token_for_user(sharepoint_user, sharepoint_password) ctx = ClientContext(sharepoint_base_url, auth) web = ctx.web ctx.load(web) ctx.execute_query() print(\u0026#39;Connected to SharePoint: \u0026#39;,web.properties[\u0026#39;Title\u0026#39;]) # Output: Connected to SharePoint: My Sharepoint 下載檔案 設定資料夾路徑。\n1 2 3 4 sharepoint_folder = # Sharepoint 資料夾路徑 output_dir = # 檔案儲存於本機的路徑 if not os.path.exists(output_dir): os.mkdir(output_dir) 列出資料夾下的檔案名稱。\n1 2 3 4 5 6 7 folder = ctx.web.get_folder_by_server_relative_url(sharepoint_folder) filenames = [] sub_folders = folder.files ctx.load(sub_folders) ctx.execute_query() for s_folder in sub_folders: filenames.append(s_folder.properties[\u0026#34;Name\u0026#34;]) 下載檔案到本機。\n1 2 3 4 5 6 7 8 9 10 11 for filename in filenames: path = os.path.join(sharepoint_folder, filename) file_response = File.open_binary(ctx, path) if file_response.content: with open(os.path.join(output_dir, filename), \u0026#39;wb\u0026#39;) as output_file: output_file.write(file_response.content) print(f\u0026#34;{filename} saved\u0026#34;) # Output: # 001.txt saved # 002.txt saved # fig.png saved 這樣就完成了！\n參考資料 https://stackoverflow.com/questions/59979467/accessing-microsoft-sharepoint-files-and-data-using-python https://github.com/bashamsc/sharepoint_python/blob/main/sharepoint_read_file_python.py Photo by Windows on Unsplash\n","date":"2023-09-05T00:00:00Z","image":"https://andreashih.com/blog/p/%E4%BD%BF%E7%94%A8-python-%E5%8F%96%E5%BE%97-microsoft-sharepoint-%E7%9A%84%E8%B3%87%E6%96%99/laptop_hu7927e7f95008ec0cf6641a6327b984b3_142330_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/%E4%BD%BF%E7%94%A8-python-%E5%8F%96%E5%BE%97-microsoft-sharepoint-%E7%9A%84%E8%B3%87%E6%96%99/","title":"使用 Python 取得 Microsoft Sharepoint 的資料"},{"content":"The Untethered Soul 腦中的聲音 我們常常會被自己的想法給困住，認為腦中的聲音就代表自己。作者在書中以靈性的角度探索「自我」，說明自我不是思想 (mind)，而是覺察 (awareness)。你不是你腦中的聲音，而是聽到聲音的人。\n正因如此，我們並不需要跟那些聲音奮戰，也不需要活在腦中建構出來的世界。應該要覺察正在經歷的一切，像是在看電影一樣，觀察著各式各樣的想法和感受來來去去。當我們可以坐在觀眾席欣賞著腦中的電影，就能以超脫的視角客觀地看待問題，不會迷失在負面情緒當中。\n流動的能量 意識 (consciousness) 是很強大的力量。把意識放在想法和感受上是相當耗能的，並且投以越多關注，花費的氣力就越多。人類的各種情緒和感受都是一種能量，而最好的能量狀態應該是流動的。若是受過往經驗阻礙，刻意抗拒某個感受，就會將能量積壓在心裡。這些窒礙的能量在瑜伽哲學中稱為 samskara (內心印記)。我們以既有的經驗與世界互動，所累積的未結能量 (unfinished energy pattern)，會在心底深處留下許多印記，而這些印記也是痛苦的根源。\n當我們感受到痛苦時，必須了解到痛苦也只不過是一種能量。負面情緒來臨時，應該放手讓他離開。不斷的反芻會讓能量積壓在內心深處，就更難自然消逝。\n不要把生命當敵人 有時候被問到近況，我們會投以苦笑回答「還好，還活著。」作者提醒我們不要與全世界為敵 (\u0026ldquo;me against it\u0026rdquo; situation)。正如能量是流動的，生命也是不斷變動的。若嘗試控制生命，就會處在擔驚受怕的狀態，不算真的活過。生命不是敵人，而是處處充滿著善意，我們所遇的一切人事物都是成長的契機。\nAcross The Universe 讀這本書時，不斷想到 The Beatles 的 Across The Universe，歌詞與書中概念不謀而合。\nWords are flowing out\nLike endless rain into a paper cup\nThey slither while they pass\nThey slip away across the universe Pools of sorrow, waves of joy\nAre drifting through my opened mind\nPossessing and caressing me\nJai Guru Deva, Om\nNothing\u0026rsquo;s gonna change my world\nNothing\u0026rsquo;s gonna change my world\nThe Happiness Trap The Happiness Trap 和 The Untethered Soul 都強調「你不是你腦中的聲音」。不同的是 The Untethered Soul 是從靈性的角度出發，認為上帝造人的預設值是快樂的，我們不應被想法給困住而遠離應得的快樂。 The Happiness Trap 則是以科學實證為基礎，說明在人類演化的過程中，生存本能讓大腦特別容易注意到生活中的威脅，因此人類本來就是不快樂的。\n「快樂的陷阱」(the happiness trap) 是指人們經常高估自己控制週遭事物的能力，希望可以趨樂避苦，但卻落入了負面循環的陷阱。大腦喜歡想像一個完美的人，擁有美好的一切過著快意人生，並以他為標準跟現在的自己比較，所以永遠覺得自己不夠好，永遠無法感受到快樂。\n本書定義的「快樂」是指一個豐富且有意義的人生。作者以接納與承諾療法 (Acceptance and Commitment Therapy, ACT) 出發，提供實例與方法，讓我們從快樂的陷阱中解脫。接納與承諾療法的縮寫是 ACT (行動)，恰好也是這個理論的主軸：採取行動創造理想的人生。\nControl Strategy 人類許多的不快樂，都源自高估了控制外在情況的能力。快樂的陷阱來自無效的 control strategies (粗譯：控制策略)，例如：工作壓力大，所以假日埋頭追劇或是去吃大餐。這些試圖改變外在情況以感到快樂的行為就是控制策略，有些小事情透過控制策略就可以解決，因此助長了錯誤的信心，認為我們可以控制很多事。但當負面情緒十分重大無法輕易排遣時，就容易感到慌張無助，因此落入快樂的陷阱。\nStruggle Switch 我們往往會因為自己的焦慮而感到焦慮，甚而感到憤怒和沮喪，然而越想逃開這種負面循環，反而會越陷越深。作者以 struggle switch (粗譯：掙扎開關) 說明這種情況。情緒的中心其實是一系列的生理變化，例如心跳加速，血壓升高等，而這些生理變化會讓我們準備好採取行動。當掙扎開關被打開，試著與外在壓力抗衡，就會出現更多的痛苦，又稱 dirty discomfort。把掙扎開關關掉，我們才能認知到負面情緒只不過是生理上和情緒上自然產生的不適，也就是 clean discomfort。\n關掉掙扎開關的方式就是接納 (accept)。接納是指在混亂的負面情緒中找到一個穩定的立足點，這並不表示你喜歡待在這個狀態或是要永遠待在這裡，而是要先穩住腳步再採取下一步的行動。\n作者在個人 YouTube 頻道生動地解釋了 struggle switch，可以更瞭解它的定義和成因。\nAcceptance and Commitment Therapy 接納與承諾療法有兩個主要的目標 (1) 有效率地處理痛苦的情緒 (2) 創造豐富有意義的生命。大致上可以分成六個原則：\n認知脫鉤 (Defusion)\n認知脫鉤是指不去刻意避開不快樂的想法，而是回到他們的本質：一連串腦中出現的文字和畫面。這些想法就像天上的雲朵隨意浮現或消散，不必刻意追逐，只需靜靜觀察。\n相對於認知脫鉤，認知糾纏 (cognitive fusion) 是指將注意力過度放在腦中的想法上，而忽略其他資訊。我們還是可以關注自己的想法，但只需要注意有幫助的想法，無益的想法就以認知脫鉤讓他們離開。\n接納 (Acceptance, or Expansion)\n接納是指留空間給負面情緒，不刻意把他們推走。\n連結 (Connection)\n連結是指專注於當下正在做的事情，用心感受現在。\n覺察 (The observing self)\n覺察 (the thinking self) 相對於思考 (the thinking self)，是指不刻意理性分析，把評價放在一邊，直接觀察事物的本質。\n價值 (Values)\n價值是指釐清對自己而言最重要的事物，可以體現在家庭、友情、愛情、職業、健康，甚至是與社會的連結。價值是指引人生的明燈，即使路途艱困，心中的價值會引導自己繼續前進。\n承諾行動 (Committed action)\n根據自己的價值採取行動，並且就算失敗多次，還是會堅守價值做正確的事。\n接納與承諾療法可以讓我們釐清現況，並與負面情緒和平共處。但作者也提醒，練習 ACT 的確可能讓心情變好，但這並不是主要的目標。如果將 ACT 變成 control strategy 將會適得其反。\n延伸閱讀：認知脫鉤 (defusion)：與失控的負面想法共存\nPhoto by Camille Brodard on Unsplash\n","date":"2023-05-06T00:00:00Z","image":"https://andreashih.com/blog/p/2023-03~04-%E6%9C%88%E4%BB%BD%E9%96%B1%E8%AE%80/book_hua5656f0a6926944c4b7a13e783d7577f_172351_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/2023-03~04-%E6%9C%88%E4%BB%BD%E9%96%B1%E8%AE%80/","title":"2023 03~04 月份閱讀"},{"content":"上週四 (2023/04/27) 很榮幸得到中山大學應數系林晉宏副教授，以及外文系徐淑瑛教授的邀請，回到母校演講。選定這個主題，除了跟上最近火紅的話題，也希望透過與聽眾的互動，了解不同領域的老師和學生們如何使用 ChatGPT。近期相關發展非常快速，工具更是如雨後春筍般出現，本次演講未能涵蓋全部主題，但希望向大家介紹自然語言處理、ChatGPT 模型訓練原理，以及實用的 prompting 和 API 使用範例。\n這次演講感謝中山共學群的老師們：應數系林晉宏老師、翁鵬絜老師，外文系徐淑瑛老師、歐淑珍老師、黃舒屏老師的支持，讓我有機會完成一個值得紀念的里程碑。也感謝班導李祁芳老師特地來參加我的演講，看到老師在台下就很安心！由衷感謝碩班指導老師 - 謝舒凱老師幫我 review 投影片，並提供我演講聚焦的方向。\n感謝來參與的同學們，在 QA 時間同學們的發問及討論讓我獲得很多啟發。像是大型語言模型的訓練方式、著作權問題，甚至是計算語言學的未來等，都讓我重新思考了 ChatGPT 帶來的影響。除此之外，同學們也發問了和語言所、資料科學、及未來求職相關的問題，也有同學和我分享他們的跨域經驗，不論是自學或參加專題都非常厲害。也很開心本次演講獲得深入淺出、生動有趣且實用的回饋！\n📄 演講投影片：bit.ly/20230427_nsysu_nlp\n理工長廊上的海報 演講途中 Photo by Patrick Robert Doyle on Unsplash\n","date":"2023-05-01T00:00:00Z","image":"https://andreashih.com/blog/p/%E4%B8%AD%E5%B1%B1%E5%A4%A7%E5%AD%B8%E6%BC%94%E8%AC%9B/laptop_hu4560c8dae6a6ad18f92829674069932f_40436_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/%E4%B8%AD%E5%B1%B1%E5%A4%A7%E5%AD%B8%E6%BC%94%E8%AC%9B/","title":"中山大學演講"},{"content":"Mindset: The New Psychology of Success Fixed Mindset vs. Growth Mindset 作者將心態 (mindset) 分為定型心態 (fixed mindset) 和成長心態 (growth mindset)。定型心態認為天賦與生俱來，聰明才智無法被改變。成長心態則認為能力可以隨著練習與經驗成長。心態源自個人所經歷的成功與失敗經驗，以及他人（尤其是權威人士）對於結果的反應。如果常接觸到天生智力決定一切的暗示，會助長定型心態。反之，若身邊環境包容錯誤並鼓勵嘗試，則會培養出成長心態。定型心態和成長心態也有可能同時並存，例如有些人在職場上展現成長心態，但對於自己的藝術天份則抱持定型心態。\n作者認為兩種心態並無孰優孰劣，但成長心態更能以開放的態度面對新的經驗，面對逆境時也較有彈性。定型心態較在意標籤及認可，為了不被歸類為平凡的一群，傾向逃避困難的任務。成長心態則不會將失敗視為對自身價值的否定，面對困境時不會批判自己或他人能力不足，而是相信每個人都在學習的路上。\n天才的故事 雖然社會上推崇努力，但大家還是都愛聽天才的故事。我們將天才的故事當作傳奇傳頌，彷彿他們的成就毫不費力。如此一來，我們就有了藉口：「因為他是天才才能這麼厲害，我沒有這個才能，再努力都不可能跟他一樣」。這種模式也讓努力被貼上負面標籤，成功的人似乎不應該努力，本來就會成功，努力是沒有才能和不聰明的人在做的。這種想法會加劇定型心態的天生才智論點，相關的現象例如 duck syndrome，可以粗略地對應到「你必須很努力，才能看起來毫不費力」，意指私底下努力維持高成就，在外卻刻意表現得一派悠閒的衝突行為。在面對挫折時，定型心態也是較為直覺的解釋方式，例如我們常掛在嘴邊的「我就爛」。將自己的失敗歸咎於先天才能的不足，似乎就可以逃避後天努力的責任。\nGrowth Mindset 的反效果 作者提醒如果只是表面上接受成長心態，就想要得到相對應的報酬，容易造成反效果。成長心態不應該只是手段，而是應該從根本調整。我認為要調整成成長心態，需要很長期的 reframe。當發現自己又落入定型心態的想法時，要提醒自己 reframe 事情的狀態，凡事都有一個 growth mindset 的解釋方式。\nGrit: The Power of Passion and Perseverance 恆毅力 (Grit) 作者定義了恆毅力 (grit) 的兩個元素：熱情 (passion) 和毅力 (perseverance)。如果只有熱情但沒有毅力，往往會見異思遷，無法長時間投入某一項專業，也就無法累積知識及技能。只有毅力而沒有熱情，則無法驅使人往更遠大的目標及核心價值邁進，大概可以類比「認真是拚不過迷戀 (bê-luân) 的」這句話。有些人在先天上具有恆毅力的優勢，但恆毅力是可以後天養成的。例如主動為自己尋求挑戰，勇敢嘗試不熟悉的任務，或是加入充滿恆毅力的環境向他人學習。除了熱情與毅力，利他的目標在恆毅力中佔有一席之地。具有恆毅力的人，將生命旅途視為一場馬拉松，而利他的目標就是旅途上的北極星，指引前進的方向。擁有利他的目標，可以走得更長遠。\n成長心態、心流與刻意練習 恆毅力與其他心理學家所提出的概念息息相關，可以互相印證。閱讀恆毅力一書時，許多論點和例子亦可用上一本書中提到的成長心態解釋。作者認為恆毅力與成長心態相輔相成，擁有成長心態的人勇於接觸新事物，遇到挫折較有彈性，也更有恆毅力，可以保持熱情往目標前進。作者也指出具有恆毅力的人，會做更多刻意練習，並且更常體驗到心流。在刻意練習的情境中，先天聰明才智並非必要，而是用正確方法持續不懈地精進能力。在從事刻意練習時，帶來的反饋可以進入心流，帶來極為專注的最佳體驗，也因此助長刻意練習的動力。成長心態、恆毅力和刻意練習的論點都強調成功並非仰賴天賦，而是透過後天努力而來。面對新挑戰時抱持成長心態積極學習，用正確的方式練習，並以恆毅力堅持不懈，才是通往成功的必經之路。\nPhoto by Thought Catalog on Unsplash\n","date":"2023-02-27T00:00:00Z","image":"https://andreashih.com/blog/p/2023-01~02-%E6%9C%88%E4%BB%BD%E9%96%B1%E8%AE%80/read_3_huff35f89978227bd155869da3b6ea8f8e_140269_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/2023-01~02-%E6%9C%88%E4%BB%BD%E9%96%B1%E8%AE%80/","title":"2023 01~02 月份閱讀"},{"content":"Storytelling with Data 作者部落格：storytellingwithdata.com\n這本幾乎是 data scientist 人手一本的案頭書，內容十分精鍊且容易應用。在研究所時期，我的指導老師就耳提面命要我們避開圓餅圖，本書作者也指出圓餅圖和立體圖是最要避免的資料呈現方式。原以為我的視覺化能力大約有中上程度，總是恪守文字對齊、色彩統一，還有在折線圖尾端加上資料標籤。但閱讀本書後，發現自己還是在不經意間製作了許多爛圖表，舉例如下：\n呈現資料時要用「解釋型分析」\n這應該是我在工作時犯的第一個錯誤。為了報告做了許多探索型分析，因此想將全部的結果都塞給觀眾，證明自己的用心，卻使得重點失焦。作者把探索型分析比喻成「一百顆牡蠣」，解釋型分析比喻成「兩顆珍珠」。報告時應該呈現去蕪存菁的珍珠，避免拖著觀眾陪你一起扒開一百顆牡蠣。\n投影片標題位置寫上結論\n剛開始做投影片時，老闆提醒我要在投影片的標題位置加上圖表的結論。我原先有些不解，因為研究所時做的投影片標題都是寫 Introduction, Methods, Conclusion 之類的字眼。作者提到觀眾在看投影片時，是以「之」字型方向由左上至右下瀏覽，如果能先看到結論再搭配圖表，可以大幅提升溝通效率。\n堆疊長條圖 (Stacked bar chart) 避免太多顏色\n之前在做不同類別變項的比較時，畫了一張堆疊長條圖，但是因為種類繁多，整張圖大概有五六種顏色，直接被老闆說太花了。作者在書中提出解方，以下圖左方為例，顏色花花綠綠包含太多雜訊，沒辦法一眼看到重點。此時應思考我們要引導觀眾注意哪裡，並且只在該處使用色彩，其餘部分則以灰階呈現，如下圖右方所示。\n折線圖 (Line chart) 不要變成麵條圖\n所謂麵條圖，就是像麵條一樣堆疊在一起的折線圖。之前在呈現不同時段的物料量趨勢時，畫出了一張麵條圖，導致報告時需要更多時間解釋。圖片中許多雜亂的線條，讓重點難以呈現。作者提出了幾種解決方式，包括以顏色強調重點線條，或將各折線以空間分開呈現等。下圖呈現書中強調線條的範例，與堆疊長條圖的修正方式類似，都是減少雜訊讓重點突出，以達到資料溝通的效率。 作者強調如何藉由人類視覺的特性，掌握觀眾的注意力，包括將格式塔視覺法則以及前注意特徵運用在圖表製作中。除了視覺呈現外，如何用資料說出好故事也十分重要。作者借用了文學及戲劇中的敘事結構 setup-conflict-resolution 來解釋如何描述資料故事。除了按照時間順序，也可以用結尾開頭，直接開門見山說明結論與解決行動。\n題外話：讀到這一段時，我剛好接受了台大新聞所助理的訪問，有一題是跨域求職者的優勢。我想對於外文背景的人來說，storytelling 是個可以大放異采的舞台。\nThe 5 Love Languages Singles Edition 本書的前身 The 5 Love Languages 主要是寫給已婚夫婦，但有許多單身者也想知道愛之語 (Love Languages) 該如何應用在婚姻以外的日常生活中，促使作者寫了這本書。作者所提出的五種愛的語言分別是：\n肯定的言語 (Words of Affirmation)：例如稱讚、鼓勵或感謝。\n服務的行動 (Acts of Service)：例如幫對方跑腿、分擔工作或家事等。\n真心的禮物 (Gifts)：根據對方的需要和喜好準備禮物，價格並非重點。\n精心的時刻 (Quality Time)：雙方一起從事活動，並給予對方完整的注意力。\n身體的接觸 (Physical Touch)：牽手、擊掌或擁抱等表達親密感的身體接觸。\n除了浪漫關係外，這五項愛之語也適用於職場、友情、親情等任何需要與人互動的場合。作者指出每個人都有主要的愛之語，只要最主要的部分被滿足了，就能感受到愛。先滿足對方的主要愛之語，再適度加入其他項，可以提升關係的滿意度。反之若沒有接收到主要的愛之語，則不會感受到愛。例如：小明的主要愛之語是「精心的時刻」，但他的爸媽因工作繁忙無法陪伴而以物質滿足孩子。小明就算收到許多禮物，心靈依然無法得到滿足。\n想判斷自己的主要愛之語，可以思考自己最常表示愛的方式為何。例如：如果你經常以「服務的行動」來表示愛，你的主要愛之語很有可能也是服務的行動。想要怎麼被對待，就會以同樣的方式對待別人。如果不容易判斷，作者也設計了愛之語測驗，讓我們探索自己的主要愛之語，如此一來就能與重要他人溝通自己的需要。這些題目也可以幫助我們判斷重要他人的主要愛之語，讓關係更加融洽。\n雖然書中並未提到，但我認為面對不同的對象，主要愛之語也會有所變化。例如，面對父母，「肯定的言語」最能讓我感覺被愛，但面對朋友，「服務的行動」重要性則排到第一。愛之語應該不是固定的，會根據相處的人調整不同的優先順序。\nPhoto by Lilly Rum on Unsplash\n","date":"2022-12-31T00:00:00Z","image":"https://andreashih.com/blog/p/2022-11~12-%E6%9C%88%E4%BB%BD%E9%96%B1%E8%AE%80/read_2_hue2a45d49703dd9b2d8893c60dded941b_77639_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/2022-11~12-%E6%9C%88%E4%BB%BD%E9%96%B1%E8%AE%80/","title":"2022 11~12 月份閱讀"},{"content":"Designing Your Work Life 這本書的主要受眾應該是已經工作一段時間的人，但是新鮮人如我也從中獲得許多洞見。最喜歡的概念是 good enough for now，接受自己目前的工作狀態，同時期待未來的自己可以更好，而不是洩氣的對著遙遠的目標望洋興嘆。書中講述如何重擬問題 (reframe)，從看似無解的工作煩惱中找到可以改變的地方，並透過實例介紹如何從工作中找到重新設計 (redesign) 的機會。在重新設計工作時，首先要認識自己的專長，並以原本建立的工作基礎往外擴展。書中有一個跳板 (springboard) 的比喻，我們可以從先前的知識及經驗不斷連結到下一個，持續探索熱愛的工作。經驗的連結讓我想到 connect the dots，不同的是 springboard 是從現在為出發點往前看，而 connet the dots 是回顧並連結過去的經歷。\n生命中不能承受之輕 作者的距離與讀者很近，敘事方式像是一位朋友在咖啡廳面對面和你說故事。某些段落讀得讓人喘不過氣，好像整個世界被倒了過來。但作者的論述卻讓人很有安全感，角色的呈現也容易讓人共感，於是懸著一顆心一頁一頁翻下去，在咖啡廳裡的身體不由自主向前傾，認真地聆聽。書中藉由主角間的故事交織著數個主題，如永劫回歸、生命及愛情觀輕與重的對立、事物「偶然」與「非如此不可」的兩面向、不知者是否無罪、女性如何刻意揚棄美貌以惡俗包裝自己，以及群體與政治中的媚俗 (kitsch)。而盤旋在我腦中的是作者一開始對於「重複」的探討。以永劫回歸觀來說，假如生命中每一刻都有無數次的重複，生命將會是無法承受的沉重的負荷。\nEinmal ist Keinmal 只發生一次的事情，等於沒有發生過。\n人類的時間不是一種圓形的循環，是飛速向前的一條直線。所以人不幸福，幸福是對重複的渴求。\n那麼，只發生過一次的生命，究竟有沒有發生過呢？如果在某一個世界中人類無法感知到重複，是否可以將每一刻都當作一次新的人生？如此一來，我們每分每秒都是在重新活著。\n槍砲、病菌與鋼鐵：人類社會的命運 在芭樂人類學上看到林開世老師的文章，因此想起了這本書。作者認為各族群天生才智並沒有太大區別，但由於環境因素 (地理、氣候、物種\u0026hellip;)，以及對新技術的開放程度，導致日後的發展程度有所不同。曾經旁聽過林老師的課，在課堂上老師提出的問題至今仍想不出解答：人類為什麼要從狩獵採集轉移到農業？事實上，農業使人類食物來源的多樣性大大降低，且農業帶來的群居生活對於人類發展是否為進步也未可知。從作者的論述中，農業與人口增加是互相影響的，不能分辨何者為因何者為果。以地理環境來說，如果該地區可馴化的動植物種類多，就越可能演變成農業社會。在馴化的例子中，豌豆讓我印象深刻：突變的豌豆並不能爆開使種子散播到更遠的地方繁殖，這反而成為人類馴化豌豆的助力。\n也許不是本書重點，但我注意到國家的代名詞是「她」。以前外文系的老師提過像國家、船等能「容納」其他東西的主體，容易被指涉為女性的意象。也有一說在戰爭期間，國家常以女性代名詞指稱，呈現需要被守衛及保護的形象。\n原子習慣：細微改變帶來巨大成就的實證法則 這本書很適合當作行為的工具書，當發現自己的生活偏離軌道時，拿起來翻閱一下可以重新回到平衡。書中提到的幾個方法值得參考：\n把新的習慣跟原本就會做的事，或是喜歡的事綁在一起。例如：想建立整潔的習慣，可以改成「刷完牙，我就會清潔洗手台」、「看完電視，我就會去拖地」。把一個新習慣勾在原本的習慣後面，可以大幅提高完成的機率。 日常生活所做的每一件事都是在「投票給想成為的人」，剛開始一個新習慣不需要設立過高的目標，甚至可以做一下就停，目的是養成「我就是這樣的人」的態度。這一點很吸引人，似乎可以用很低的門檻養成一個新習慣。但我認為習慣要延續，還是得從中認知到明顯的益處或樂趣才行。 Photo by Joel Muniz on Unsplash\n","date":"2022-10-31T00:00:00Z","image":"https://andreashih.com/blog/p/2022-09~10-%E6%9C%88%E4%BB%BD%E9%96%B1%E8%AE%80/read_1_huac9d1c438eb141c445d09eddde2e0204_675763_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/2022-09~10-%E6%9C%88%E4%BB%BD%E9%96%B1%E8%AE%80/","title":"2022 09~10 月份閱讀"},{"content":"我的個人網頁原先是用靜態網頁生成器 Jekyll 製作，再用 github pages 進行部署。第一次架站時還是程式極新手，各種網頁知識的不足著實讓當時的我吃了不少苦頭（實作過程可以看這篇以及這篇）。架好後也一直掛著 andreashih.github.io 的網址，陪伴我整個碩士生涯。\n最近突然萌生了購買自己網域的念頭，又想試試看 Hugo 到底多厲害，畢竟他官網首頁直接寫著 The world’s fastest framework for building websites，索性重新架站。\n本次架站步驟如下：\n購買喜歡的網域名 (domain name) - 我是在 GoDaddy 買的 在本機下載 Hugo 及其主題 (theme) - profile 主題使用 hugo-profile - blog 主題使用 hugo-theme-stack 上傳到 GitHub repo 部署到 github pages 更改域名 完成！🎉 用 Hugo 搭配 github pages 架站的網路資源十分豐富，有各種文章、影片，甚至是付費課程可以參考。在網路上搜尋時要注意發表日期，越新越好。以下詳列我使用到的資源：\nHugo Documentation：Hugo 的文件寫得十分清楚易懂 Zoey 的程式日常：非常詳細又簡明易瞭，而且是中文！ YT 頻道 - codefoxx：一步一步帶你完成 github pages 自訂網域的設定 體驗下來覺得 Hugo build 的速度真的很快，文件好理解，錯誤訊息的解法也算好找。目前舊的個人網頁已經移到這裡保存，只是應該不會再更新了。\nPhoto by Joanna Kosinska on Unsplash\n","date":"2022-09-10T00:00:00Z","image":"https://andreashih.com/blog/p/%E5%80%8B%E4%BA%BA%E7%B6%B2%E9%A0%81%E5%A4%A7%E6%9B%B4%E6%96%B0/notebook_hu4136eab7bf22cf4656283a14146fbfd1_105593_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/%E5%80%8B%E4%BA%BA%E7%B6%B2%E9%A0%81%E5%A4%A7%E6%9B%B4%E6%96%B0/","title":"個人網頁大更新"},{"content":"關於萌典 萌典是一部由臺灣開源社群 g0v 零時政府開發的數位化漢語詞典。國語資料來源為《教育部重編國語辭典修訂本》，閩南語資料來自《臺灣閩南語常用詞辭典》，客家語資料則源自《臺灣客家語常用詞辭典》。除此之外，該計畫近日也新增了阿美語萌典。\n網站 GitHub 方法一： BeautifulSoup 1 2 import requests from bs4 import BeautifulSoup 以「容忍」一詞為例：\n1 2 3 4 5 6 word = \u0026#39;容忍\u0026#39; res = requests.get(url = f\u0026#39;https://www.moedict.tw/{word}\u0026#39;) print(res) ## \u0026lt;Response [200]\u0026gt; 確認請求成功後，回到網頁，使用快捷鍵 Option+Command+U（Windows: Ctrl + U，或是右鍵 -\u0026gt; View Page Source），從網頁原始碼中可以看到同義詞和反義詞藏在 \u0026lt;span\u0026gt; tag 裡面。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 soup = BeautifulSoup(res.text, \u0026#39;lxml\u0026#39;) span_syn = soup.select(\u0026#39;span.synonyms\u0026#39;) span_ant = soup.select(\u0026#39;span.antonyms\u0026#39;) if span_syn: syn = span_syn[0].get_text() syns = syn[1:].split(\u0026#39;、\u0026#39;) else: syns = [] if span_ant: ant = span_ant[0].get_text() ants = ant[1:].split(\u0026#39;、\u0026#39;) else: ants = [] moe_relations = {\u0026#39;synonyms\u0026#39;: syns, \u0026#39;antonyms\u0026#39;: ants} 最後得到「容忍」的同義詞和反義詞如下：\n1 2 3 moe_relations ## {\u0026#39;antonyms\u0026#39;: [\u0026#39;發作\u0026#39;, \u0026#39;拒絕\u0026#39;, \u0026#39;生氣\u0026#39;], \u0026#39;synonyms\u0026#39;: [\u0026#39;忍耐\u0026#39;]} 方法二： urllib 1 2 import urllib.request, urllib.parse import json 同樣以「容忍」一詞為例：\n1 2 3 4 5 word = \u0026#39;容忍\u0026#39; word_urllib = urllib.parse.quote_plus(word) with urllib.request.urlopen(f\u0026#39;https://www.moedict.tw/raw/{word_urllib}\u0026#39;) as url: data = json.loads(url.read().decode()) 將 json 檔讀進來，結構如下：\n1 2 3 4 5 6 7 8 9 10 11 data ## {\u0026#39;heteronyms\u0026#39;: [{\u0026#39;bopomofo\u0026#39;: \u0026#39;ㄖㄨㄥˊ ㄖㄣˇ\u0026#39;, ## \u0026#39;bopomofo2\u0026#39;: \u0026#39;rúng rěn\u0026#39;, ## \u0026#39;definitions\u0026#39;: [{\u0026#39;antonyms\u0026#39;: \u0026#39;發作,拒絕,生氣\u0026#39;, ## \u0026#39;def\u0026#39;: \u0026#39;包容、忍耐。\u0026#39;, ## \u0026#39;quote\u0026#39;: [\u0026#39;漢書．卷八十六．王嘉傳：「唯陛下留神於擇賢，記善忘過，容忍臣子，勿責以備。」\u0026#39;, ## \u0026#39;元．無名氏．連環計．第四折：「倒是呂布兄弟還容忍得過，若我白袍李肅呵，殺了那老賊多時也。」\u0026#39;], ## \u0026#39;synonyms\u0026#39;: \u0026#39;忍耐\u0026#39;}], ## \u0026#39;pinyin\u0026#39;: \u0026#39;róng rěn\u0026#39;}], ## \u0026#39;title\u0026#39;: \u0026#39;容忍\u0026#39;} 從 json 檔中一層一層抓出同義詞和反義詞：\n1 2 3 4 5 6 7 8 9 10 11 12 syns = data.get(\u0026#39;heteronyms\u0026#39;)[0].get(\u0026#39;definitions\u0026#39;)[0].get(\u0026#39;synonyms\u0026#39;) ants = data.get(\u0026#39;heteronyms\u0026#39;)[0].get(\u0026#39;definitions\u0026#39;)[0].get(\u0026#39;antonyms\u0026#39;) if syns: syns = syns.split(\u0026#39;,\u0026#39;) else: syns = [] if ants: ants = ants.split(\u0026#39;,\u0026#39;) else: ants = [] moe_relations = {\u0026#39;synonyms\u0026#39;: syns, \u0026#39;antonyms\u0026#39;: ants} 最後結果如下：\n1 2 3 moe_relations ## {\u0026#39;antonyms\u0026#39;: [\u0026#39;發作\u0026#39;, \u0026#39;拒絕\u0026#39;, \u0026#39;生氣\u0026#39;], \u0026#39;synonyms\u0026#39;: [\u0026#39;忍耐\u0026#39;]} 結論 相較於以語意關係為主軸建置的中文詞彙網路，萌典的語意關係資料較少，僅部分詞條具有同義及反義詞，且並未區分同義和近義。但萌典收錄的詞條較為完整，還有讀音、部首、筆劃等資訊，可以用於不同研究主題。\n👩‍💻 本文程式碼連結\nPhoto by Richa Sharma on Unsplash\n","date":"2022-04-11T00:00:00Z","image":"https://andreashih.com/blog/p/%E6%9F%A5%E8%A9%A2%E8%90%8C%E5%85%B8%E4%B8%AD%E7%9A%84%E5%90%8C%E7%BE%A9%E8%A9%9E%E5%92%8C%E5%8F%8D%E7%BE%A9%E8%A9%9E/book-shadow_hu840c57bb5aef40e848d28e7a219b1951_103929_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/%E6%9F%A5%E8%A9%A2%E8%90%8C%E5%85%B8%E4%B8%AD%E7%9A%84%E5%90%8C%E7%BE%A9%E8%A9%9E%E5%92%8C%E5%8F%8D%E7%BE%A9%E8%A9%9E/","title":"查詢萌典中的同義詞和反義詞"},{"content":"最近找到了三個實用而且版面漂亮的日記應用程式。雖然紙筆的地位無法取代，但寫東西在紙上時容易瞻前顧後，怕自己字寫醜了，或是隨手亂放被旁人看到。這時使用 app 在手機上隨手記錄就非常方便。以下介紹的三個應用程式都可以免費使用，且在 ios 和 android 上都可以取得，就讓我們看下去吧！\nDaylio ✅ 支援中文版\n✅ 可備份\n❎ 不可加密碼 (需升級到 premium)\n✅ 有 premium 版\nDaylio 主打心情紀錄，不用書寫文字。除了預設之外還有很多可愛的表情可以新增，顏色也可以自由更換（當然免費版的選擇會比較少）。隨手點一點就可以記錄當下的心情，一天當中可以記錄很多次，還可以選擇現在正在做的事情，幫助我們了解做什麼事情會帶來怎麼樣的心情（例如：去跑步-\u0026gt;覺得開心、煮飯-\u0026gt;覺得平靜）。\nDaylio 還有很棒的功能：週報和月報，可以了解一段期間內的心情變化，還會計算情緒分數和繪製心情折線圖。資料可以匯出成 csv 格式。\n除此之外，Daylio 也可以用來設定目標，根據不同的目的（例如：幫助睡眠、釋放壓力\u0026hellip;）推薦不同的活動，並設定一週要從事幾次。\n總結：\n功能超多 不用打字，懶人福音 視覺化成癮者適用 Five Minute Journal ❎ 無中文版\n✅ 可備份\n✅ 可加密碼 (或 touch/face ID)\n✅ 有 premium 版\nFive Minute Journal 介面超文青超有質感，是適合一早起床就使用的 app。點開後會看到一句正能量小語，接著會出現三個問題：\n3 things I am grateful for What will I do to make today great Daily affirmations 晚上可以再回到 app 回答剩下的兩個問題：\nHighlight of the day How could I have made today even better 早上的問題可以提升動力，晚上的 wrap up 則提供了反思的機會。問答的設計很像在跟一個虛擬好友聊天，溫暖的奶茶色背景也讓人感到很放鬆。\nFive Minute Journal 也有類似 Daylio 的心情記錄功能，還可以在日記中加入照片，但要升級為 premium 版才能使用。不過免費版也有 frequent words 功能，可以看到自己常常用哪些字。\n總結：\n介面文青有質感 每天有不同的正能量小語 需要寫的文字不多，適合輕度日記使用者 Day One ✅ 支援中文版\n✅ 可備份\n✅ 可加密碼 (或 touch/face ID)\n✅ 有 premium 版\nDay One 是一個老牌日記 app，介面很簡潔，版面顏色可以自己選擇。乍看有點像 ios 內建的備忘錄，也有加 tag 分類的功能。可以將日記匯出成 pdf、plain text 或 markdown 等不同格式，還可以分享連結。除了文字外也可以加上地點、天氣和照片，但免費版只能放一張。Premium 版可以放影片和錄音，支援手寫，還可以與 instagram 連動。還有一個很酷的功能：在 app 上編輯日記封面，幫你印成一本書，不過這是需要額外付費的。\n如果面對空白頁面不知如何下筆，Day One 也提供了許多模板，例如 daily gratitude、daily self\u0026hellip;等。模板中會有一些預設的問題引導你書寫，像是 daily self 模板中的五個問題是：\nWhere I\u0026rsquo;ve been\u0026hellip; My mood is\u0026hellip; People I saw\u0026hellip; Accomplishments\u0026hellip; Food I ate\u0026hellip; 總結：\n功能豐富又強大 適合喜歡好好用文字記錄心情的人 除了自己寫日記，也有分享功能方便和朋友交流 這三個 apps 都有計算 streak (連續使用天數) 的功能，每天都能累積小小的成就感。透過紀錄心情和書寫想法，也可以整理思緒，觀察生活中存在著哪些壓力以及壓力的源頭，讓心情較為穩定。\nPhoto by Jess Bailey on Unsplash\n","date":"2022-03-03T00:00:00Z","image":"https://andreashih.com/blog/p/%E4%B8%89%E6%AC%BE%E6%97%A5%E8%A8%98%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E5%88%86%E4%BA%AB-dayliofive-minute-journalday-one/journals_hu0a9e5720e3c8917abefdd8535b2dfb56_46320_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/%E4%B8%89%E6%AC%BE%E6%97%A5%E8%A8%98%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E5%88%86%E4%BA%AB-dayliofive-minute-journalday-one/","title":"三款日記應用程式分享 - Daylio、Five Minute Journal、Day One"},{"content":"最近在準備論文，長時間盯著 13 吋筆電容易眼睛疲勞，因此添購了一些設備。在預算有限的情況下組合了一個不錯的工作環境，在此記錄一些設定裝置時的參考資料：\n螢幕 把 HDMI 接上去時，會發現外接螢幕上只有桌面卻沒有視窗，這是因為預設的選項是延伸螢幕。這時可以到系統偏好（System Preference）中調整為同步顯示。\n參考作法：\nUse one or more external displays with your Mac 筆電延伸螢幕 Q\u0026amp;A！5 招實用又簡單的 macOS \u0026amp; Windows 延伸螢幕操作教學！(影片) 鍵盤 剛接上去時，螢幕會出現配對鍵盤的提示。只要依序按下外接鍵盤左右 shift 鍵旁邊的鍵，就可以完成設置。\n由於外接鍵盤和 mac 鍵盤配置不一樣，這時候可以調整一些設定，方便運用快捷鍵（複製貼上、spotlight search、mission control、顯示桌面等）。\n參考作法：\n在Mac上使用Windows鍵盤配置的鍵盤 如何修改按鍵位置，讓一般 PC 鍵盤可以在 Mac 電腦中正常使用？ 滑鼠 連接 USB 滑鼠時，有時候一接上就可以使用，有時候卻要等待 5~10 分鐘才能連上，目前還沒找到原因。如果一直接不上，可以試著縮短滑鼠和 USB 接收器的距離，或重新連接 hub。接上後會發現滑鼠滾動方式有點違反直覺，此時可以調整方向（方法 1），但這方法會同時更改到觸控板的滑動方向。如果想將觸控板和滑鼠分開調整，可以參考方法 2。\nPhoto by Giorgio Trovato on Unsplash\n","date":"2022-02-22T00:00:00Z","image":"https://andreashih.com/blog/p/macbook-%E5%A4%96%E6%8E%A5%E8%9E%A2%E5%B9%95%E9%8D%B5%E7%9B%A4%E6%BB%91%E9%BC%A0%E8%A8%AD%E7%BD%AE/macbook_hu68e0716ae722728ded72925210507c2c_57734_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/macbook-%E5%A4%96%E6%8E%A5%E8%9E%A2%E5%B9%95%E9%8D%B5%E7%9B%A4%E6%BB%91%E9%BC%A0%E8%A8%AD%E7%BD%AE/","title":"MacBook 外接螢幕、鍵盤、滑鼠設置"},{"content":"結束了越級打怪的暑期實習，一瞥日曆居然已經到了九月。整個熾熱的暑假都泡在資料海裡，鍵盤和秒針滴滴答答把時間送走。實習這兩個月，雖然因為資質駑鈍過程有點辛苦，但現在回想起來還是一段很充實的學習過程。\n如何找實習 懷著對未來的不安，我一心想著要找實習確定畢業後的方向。但是關於要找哪一種實習工作，卻沒有篤定的想法。正好去年參加了 ROCLING 研討會，就把手冊上所有贊助公司名字 key 到 104 搜尋實習職缺，才發現台達的暑期實習計畫。因為非本科系，程式能力也非頂尖，原本只是抱著試試看的心情投履歷，後來會進到後端面試甚至拿到 offer 完全是我始料未及的 (還記得面試時主管問會不會寫 Java，知不知道 python 底層架構，我都說不會\u0026hellip;)\n工作內容 主要的工作項目是 data migration。簡而言之，就是把資料從舊的資料庫搬到新資料庫。為了實現這個過程，在兩個月內認識了許多新工具：\nmongoDB: 舊系統使用的 database PostgreSQL: 新系統使用的 database Apache Nifi: 原本要使用它來做 migration，但最後採用 python Redis: 存放在記憶體 (而非硬碟中) 的資料庫，主要使用到它的 bitmap 在實習一開始，mentor 教導了關聯式資料庫與資料庫正規化的概念 (歡迎參考我的筆記)。這些名詞對我來說十分陌生，花了不少時間查資料，並且做中學不斷犯錯後才漸漸理解。由於對資料庫的理解很粗淺，只會幾個基本的 SQL query，突然要處理 mongoDB 資料還要一邊注意複雜的關聯，對我來說簡直難如登天。真的要感謝 mentor 和同事耐心解惑，透過螢幕分享手把手教會我許多指令，才能在一次次的撞牆期中慢慢撞出一些成果。\n我的工作流程大致如下：\n與主管討論舊表和新表的欄位關聯 在舊表 (mongoDB) 中寫 aggregation，取出需要的欄位 如果舊表與新表資料型態不同，會先在 mongoDB 裡面轉換 (例如 ObjectId 轉字串/int 轉字串/字串轉 date 等等) 必要的話會在 python 裡面處理資料或新增欄位 在 python 裡面將 mongoDB 的舊表塞到 postgreSQL 的新表裡 資料搬遷的過程常常會遇到髒資料，而關聯式資料庫牽一髮而動全身的特性不容許髒資料的污染。一遇到 duplicate key value，馬上 error 給你看。這時候需要土法煉鋼找出重複的資料，然後跟主管確認是否移除。常常還沒搬資料，光是清資料就已經花上一整天。有時候覺得明明已經清乾淨了，卻還搬不過去，或是開心的搬過去了，但是關聯沒寫好資料有一半都不見！這種時候整個很洩氣。但很神奇的是，往往吃完午餐或隔天上班就會找到問題了。\n實習和學校的不同 以往學程式時並不會處理到太複雜的資料，在這次實習也驗證了真實資料可能產生的各種問題，例如髒資料、target 和 source DB 的資料型態不符等等。由於實習期間寫的程式不只有自己看，還會交給其他同事使用，所以也更注意該如何寫得容易維護。\n在寫程式或是分析問題時，我常常落入見樹不見林的思考謬誤中，殊不知掌握複雜系統必須適時從脈絡中離開，直接「抓重點」觀察事物的本質。這讓我想到語言的複雜系統\u0026hellip;頭又昏了@@\n如何解決問題 最快的方式就是請教 mentor，但是 mentor 常常需要開會並不是隨時有空，如果評估可以自己解決，我就會先查資料試試看。最重要的就是拆解問題，也就是了解問題背後的問題。例如，我一直搞不懂 redis 的 SETBIT function，就必須先去了解 bit。不知道資料怎麼搬，就先搬一筆試試看。一步一步往前，在問題中找到問題，接著求助 google 通常都會找到解法。真的找不到就是資料本身的問題啦。\n最大挑戰 在實習的尾聲，我碰上一個很難的問題。在舊表裡面，有一個「影片觀看紀錄」的欄位，每一筆資料都是一個像 [1,1,1,1,0,0,1,1,0,0] 的 array，其中每一個 1 代表影片播放了 5 秒。看起來很合理，但有一個很嚴重的問題。總共有 30 多萬筆資料，也就是 30 多萬個 array，而且每個 array 都比剛剛的例子長好幾倍，整個非常龐大。Mentor 希望我將觀看紀錄透過 redis 轉成 bitmap，用 gzip 壓縮後，再用 base64 encoding。聽完講解我只有一頭霧水。必須很慚愧地承認，我根本連 bit 是什麼都不大了解。雪上加霜的是，因為我配到的電腦容量不足，沒辦法裝 redis GUI 介面，所以一切只能在 command line 進行，而 command line 印出的結果是十六進制 (hex) 的樣子，不是熟悉的二進制 (binary)。所以我就硬著頭皮學了幾個 redis 指令，再把結果貼到計算機裡面驗證 (此時我才知道 windows 裡面的計算機有 programmer 模式)。剛好同事幫我找到在 python 裡面使用 redis function 的方法，第一階段終於成功把 array 轉成 bitmap。\n當我信心滿滿地 demo 給同事看時，同事問：「那你要不要跑全部資料看看？」我頓時寒毛直豎。對啊！剛才用的是前幾筆資料，我還沒跑過全部 30 多萬筆資料\u0026hellip;但也只能硬著頭皮給他跑了下去。\n然後就卡住了。\n透過螢幕分享，感覺時間過得特別的慢。我忍不住打破沉默：「呃\u0026hellip;好像有點慢，可能是我哪裡寫錯了\u0026hellip;」\n同事幫我檢查程式後，發現 mongoDB aggregation 跟 SETBIT 的地方都花了很多時間。aggregation 的部分卡在 $lookup，這部分我把資料拿出來，用 python 處理倒是蠻快就解決了。重頭戲在 SETBIT。\n同事：「不然你不要透過 redis，直接寫個 python function 轉 bitmap 吧」\n這意味著我必須完全了解 redis SETBIT function 裡面在做什麼，再思考怎麼用 python 做出一樣的效果\u0026hellip;光想就頭皮發麻。接下來就開始連續好幾天的瘋狂研究。所有能找的資料，能看的影片都被我翻了出來。最後，我用了有點複雜的方式做出了類似的結果，但是 array 後面多餘的好幾個 0 (表示沒看完影片) 卻不知道如何處理。我苦著臉打電話問同事，同事看了我的 code 之後說：「你被 SETBIT 的概念綁住了。」然後給了一個我從沒想過的簡單提議。\n登時茅塞頓開。\n接下來寫得無比順暢，程式馬上少了好幾行，順利趕在實習的最後一天寫好了。本來要跑超過兩小時的 migration 程式，現在只需不到兩分鐘，終於放下了心裡一顆大石頭。\nWork from home Work from home 的小確幸就是 8:30 上班可以 8:00 再起床，悠悠哉哉地開電腦。壞處就是沒有看到 mentor 本人，會有不知道工作做得如何的不安感。想一直回報進度又怕對方正在忙其他事情。後來終於回到辦公室，雖然大家都是各忙各的，但有人在旁邊真的會比較有動力。\n我的辦公桌 (雖然只進公司兩天)、識別證和證書 自我反省 雖然實習期間的確充實無比，但我算是外行人，對領域涉獵不深又缺乏自信，比較不是「帶著問題」去實習。這真的蠻可惜的，如果事先準備好問題，一定可以向前輩們請教更多知識和經驗。信心不足也反映在另一個小事件上，我總是覺得程式寫得不夠好 (不夠 elegant)，想一改再改，code 都推上去了但遲遲不敢發 MR，直到同事問我不是寫好了嗎為什麼 gitlab 上沒看到\u0026hellip;\n結語 回想起來，我的打工或實習似乎總是離不開資料：升大學的暑假在補習班管理學生資料，大二在教育局整理學校資料，碩班在 lab 的研究還有 NTU cool 的工讀也都在碰資料。兩個月的實習很像跑步，剛起步的時候春風得意，好像什麼事都難不倒。跑一段時間後氣喘吁吁，開始有撞牆的感覺。習慣了之後又找回步調，穩定前進。快到終點時好像有道無法突破的檻，覺得看不到希望。不過堅持到最後就輕鬆了，應該說比較不擔心了。小時候學鋼琴，老師說我彈琴看起來很怕，好像琴鍵會咬我一樣。長大後學程式也總是怕怕的，戒慎恐懼敲著鍵盤，好像 error message 會讓電腦爆炸一樣。希望自己可以好好善待心裡莫名的恐懼，反正只要穩紮穩打大步慢走就好了 (Lopers 內梗，get it?)\nHR 辦實習超用心，每個實習生都收到一張主管寫的小卡 Photo by Lauren Mancke on Unsplash\n","date":"2021-09-04T00:00:00Z","image":"https://andreashih.com/blog/p/%E5%8F%B0%E9%81%94%E9%9B%BB%E5%AD%90%E5%AF%A6%E7%BF%92%E5%BF%83%E5%BE%97-%E5%BE%8C%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB-backend-engineer/computer_hu4174250a65c1d336799b339fc25686ca_82201_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/%E5%8F%B0%E9%81%94%E9%9B%BB%E5%AD%90%E5%AF%A6%E7%BF%92%E5%BF%83%E5%BE%97-%E5%BE%8C%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB-backend-engineer/","title":"台達電子實習心得 - 後端工程師 (Backend Engineer)"},{"content":" 1 2 3 4 5 6 7 *2022/01/29 更新* 調色調上癮了，應該可以發現頁面上多了一些顏色。整理了 menu bar，把多餘的資訊拿掉，加一個 home 按鈕可以回到主頁。另外，為了版面乾淨，把 posts 和 tags 兩頁中的文章標題底線拿掉了。 *2021/09/06 更新* 把 read time 和它的 icon 都拿掉了，因為現在的計算方式是英文的 token，我找不到怎麼改算中文的。blog 首頁的預覽 truncate 也減成 250 字。原本是 350，對於中文來說有點太長了。 今天因為不想寫計算語言學作業更新了 blog 的 tag page，還有打開 RSS，在此做些紀錄。\nTag Page 隨著文章越來越多，分類就更顯重要。我用的這個 jekyll 模板本來就可以在各篇文章加入 tags，但是沒有一個獨立的 tag page，所以打算自己幫它加一個。我參考的是這篇文章的 code，只改了 css 讓按鈕變成我喜歡的顏色，顏色是在 NIPPON COLORS 挑的。\n原本在本機一切順利，但是 push 上去卻發現我的 tags 按鈕不能顯示顏色。後來找到解決方法才終於成功！\nRSS Feed 其實我一直都知道這個模板可以用 RSS feed，但就是沒有把它打開，因為不知道可以幹嘛XD\n直到最近才發現 RSS 其實蠻好用的。RSS 的全名是 Really Simple Syndication，可以讓你訂閱喜歡的 blog、podcast，甚至是 YouTube 頻道。當訂閱的網站有更新，就可以獲得通知。再也不用一個一個加到我的最愛，最後因為懶得點開看有沒有更新而遺忘他們的存在。\n要怎麼開始呢？\n很多 blog 的頁面上都找得到 RSS 的 icon (長得很像 wifi 圖示)，點進去之後會出現一堆亂七八糟的文字，請不要害怕，複製最上方的網址就對了。如果沒有 RSS 圖示的話，在頁面上按右鍵再點選 View page source 通常也找得到，只是要 ctrl+F 搜一下 RSS 網址在哪裡。\n連結複製好了，然後呢？\n現在有許多管理 RSS 的平台，最多人使用的應該屬 Feedly，直接將 RSS feed 複製貼上即可，但免費版有資料夾數量限制。Mac 用戶推薦使用 Vienna，介面簡潔好用，資料夾數量沒有限制。\n以上就是這次的小更新，也歡迎大家用 RSS 訂閱這個 blog！\nPhoto by Kris Atomic on Unsplash\n","date":"2021-05-03T00:00:00Z","image":"https://andreashih.com/blog/p/%E9%83%A8%E8%90%BD%E6%A0%BC%E7%9A%84%E5%B0%8F%E6%9B%B4%E6%96%B0tag-page-rss-css.../table_huef44498ca5b1ef33efbf79c0e5867410_111818_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/%E9%83%A8%E8%90%BD%E6%A0%BC%E7%9A%84%E5%B0%8F%E6%9B%B4%E6%96%B0tag-page-rss-css.../","title":"部落格的小更新：Tag Page, RSS, CSS..."},{"content":"這學期修了老闆的課──語料處理方法，認識了一個強大的 R 套件 zipfR (Evert and Baroni 2007) 以及 LNRE model (Baayen 2002)。這篇文章將參考老師的研究 (Hsieh 2014)，並依據 The zipfR package for lexical statistics: A tutorial introduction (Baroni and Evert 2014) 所提供的方法，以 PTT 與 Dcard 的語料進行中文斷詞問題的分析。\nIntroduction 在使用 zipfR 之前，要先認識 Zipf’s law (Zipf 1949)。簡單說明，即是在自然語言的語料庫中，一個單詞出現的頻率越高，在頻率表裡的排名越前面。且第一名的單詞出現的頻率大約是第二名單詞的兩倍、第三名單詞的三倍，以此類推。\n接下來要了解 token 和 type 的意義。這裡有一個範例詞表：\n蘋果, 橘子, 香蕉, 香蕉, 葡萄, 蘋果, 香蕉, 蘋果, 葡萄, 蘋果, 葡萄, 蘋果\n這個詞表總共有 12 個 token (sample size = 12)，以及 4 個 type (vocabulary size = 4)。在這裡我們把它表示成\nN = 12\nV = 4\n根據範例詞表，我們可以得到一個 type-frequency list：\n接著，我們又可以得到一個 Zipf Ranking，這裡的 r 將頻率由大到小排序，fr 則是指頻率：\n透過 type-frequency list，我們可以得到一個計算上非常重要的資料：frequency spectrum，其中 m 代表出現次數，Vm 代表出現該次數的單詞共有幾個：\n在範例中，出現一次的單詞有一個 (橘子)，出現三次的單詞有兩個 (香蕉、葡萄)，出現五次的單詞有一個 (蘋果)。只出現過一次的單詞，我們稱之為 hapax legomena。\n2. Lexical Richness 1 2 3 # 載入套件 library(readr) library(zipfR) 首先，將平衡語料庫 (ASBC)、PTT 和 Dcard 語料匯入並整理。PTT 語料來自 2005、2010、2015，以及 2020 共四個年度的八卦板與女板，且對其進行抽樣。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #asbc asbc_corpus \u0026lt;- paste0(readLines(\u0026#34;data\\\\asbc.txt\u0026#34;, n=10000, encoding = \u0026#39;UTF-8\u0026#39;),collapse=\u0026#34; \u0026#34;) asbc_corpus \u0026lt;- unlist(strsplit(asbc_corpus, \u0026#34;\\\\s\u0026#34;)) # PTT Gossiping board (sampled) g05 \u0026lt;- sample(readLines(\u0026#34;data\\\\Gossiping_2005_seg.txt\u0026#34;, encoding=\u0026#34;UTF-8\u0026#34;), 1250) g10 \u0026lt;- sample(readLines(\u0026#34;data\\\\Gossiping_2010_seg.txt\u0026#34;, encoding=\u0026#34;UTF-8\u0026#34;), 1250) g15 \u0026lt;- sample(readLines(\u0026#34;data\\\\Gossiping_2015_seg.txt\u0026#34;, encoding=\u0026#34;UTF-8\u0026#34;), 1250) g20 \u0026lt;- sample(readLines(\u0026#34;data\\\\Gossiping_2020_seg.txt\u0026#34;, encoding=\u0026#34;UTF-8\u0026#34;), 1250) g05 \u0026lt;- unlist(strsplit(g05, \u0026#34;\\\\s\u0026#34;)) g10 \u0026lt;- unlist(strsplit(g10, \u0026#34;\\\\s\u0026#34;)) g15 \u0026lt;- unlist(strsplit(g15, \u0026#34;\\\\s\u0026#34;)) g20 \u0026lt;- unlist(strsplit(g20, \u0026#34;\\\\s\u0026#34;)) # PTT WomenTalk board (sampled) w05 \u0026lt;- sample(readLines(\u0026#34;data\\\\WomenTalk_2005_seg.txt\u0026#34;, encoding=\u0026#34;UTF-8\u0026#34;), 1250) w10 \u0026lt;- sample(readLines(\u0026#34;data\\\\WomenTalk_2010_seg.txt\u0026#34;, encoding=\u0026#34;UTF-8\u0026#34;), 1250) w15 \u0026lt;- sample(readLines(\u0026#34;data\\\\WomenTalk_2015_seg.txt\u0026#34;, encoding=\u0026#34;UTF-8\u0026#34;), 1250) w20 \u0026lt;- sample(readLines(\u0026#34;data\\\\WomenTalk_2020_seg.txt\u0026#34;, encoding=\u0026#34;UTF-8\u0026#34;), 1250) w05 \u0026lt;- unlist(strsplit(w05, \u0026#34;\\\\s\u0026#34;)) w10 \u0026lt;- unlist(strsplit(w10, \u0026#34;\\\\s\u0026#34;)) w15 \u0026lt;- unlist(strsplit(w15, \u0026#34;\\\\s\u0026#34;)) w20 \u0026lt;- unlist(strsplit(w20, \u0026#34;\\\\s\u0026#34;)) # PTT ptt_corpus \u0026lt;- c(g05, g10, g15, g20, w05, w10, w15, w20) # dcard dcard_corpus \u0026lt;- readLines(\u0026#34;data\\\\dcard_corpus.txt\u0026#34;, encoding=\u0026#34;UTF-8\u0026#34;) Type-frequency List 使用 zipfR 套件，可以簡單地得到 type-frequency list 和它的 Zipf ranking。為了進行接下來的比較，在這裡將套件內建的 Brown.tfl 一併匯入。\n1 2 3 4 asbc.tfl \u0026lt;- vec2tfl(asbc_corpus) data(\u0026#34;Brown.tfl\u0026#34;) ptt.tfl \u0026lt;- vec2tfl(ptt_corpus) dcard.tfl \u0026lt;- vec2tfl(dcard_corpus) 看一下資料的樣子。其中 k 代表 Zipf’s ranking，f 代表頻率，N 是 sample size，V 是 type count：\n1 2 3 4 5 6 7 8 9 10 11 12 head(ptt.tfl) ## k f type ## 的 1 3039 的 ## 是 2 1578 是 ## 我 3 1506 我 ## 不 4 1123 不 ## 了 5 1070 了 ## 有 6 846 有 ## ## N V ## 77826 12837 zipfR 也可以讓我們輕鬆將資料視覺化：\n1 2 3 4 5 6 7 8 9 par(mfrow=c(2,2)) # 2*2 plot area plot(asbc.tfl, main=\u0026#34;ASBC\u0026#34;, log=\u0026#34;xy\u0026#34;, # logarithmic scale xlab=\u0026#34;rank\u0026#34;, ylab=\u0026#34;frequency\u0026#34;) plot(Brown.tfl, main=\u0026#34;Brown\u0026#34;, log=\u0026#34;xy\u0026#34;, xlab=\u0026#34;rank\u0026#34;, ylab=\u0026#34;frequency\u0026#34;) plot(ptt.tfl, main=\u0026#34;PTT\u0026#34;, log=\u0026#34;xy\u0026#34;, xlab=\u0026#34;rank\u0026#34;, ylab=\u0026#34;frequency\u0026#34;) plot(dcard.tfl, main=\u0026#34;Dcard\u0026#34;, log=\u0026#34;xy\u0026#34;, xlab=\u0026#34;rank\u0026#34;, ylab=\u0026#34;frequency\u0026#34;) Frequency Spectrum 透過剛剛的 type-frequency list，我們可以得到 frequency spectrum。Brown corpus 的 frequency spectrum 可直接從套件中匯入：\n1 2 3 4 asbc.spc \u0026lt;- tfl2spc(asbc.tfl) data(\u0026#34;Brown.spc\u0026#34;) ptt.spc \u0026lt;- tfl2spc(ptt.tfl) dcard.spc \u0026lt;- tfl2spc(dcard.tfl) 看一下資料的樣子。此處的 m 是指出現次數，Vm 代表出現該次數的 type 共有幾個：\n1 2 3 4 5 6 7 8 9 10 11 12 head(ptt.spc) ## m Vm ## 1 1 7784 ## 2 2 1850 ## 3 3 777 ## 4 4 481 ## 5 5 267 ## 6 6 209 ## ## N V ## 77826 12837 取 log 值後，下圖提供前五十筆 spectrum element 的資料：\n1 2 3 4 5 6 7 8 9 par(mfrow=c(2,2)) plot(asbc.spc, log=\u0026#34;x\u0026#34;, main=\u0026#34;ASBC\u0026#34;, xlab=\u0026#34;m\u0026#34;, ylab=\u0026#34;Vm\u0026#34;) plot(Brown.spc, log=\u0026#34;x\u0026#34;, main=\u0026#34;Brown\u0026#34;, xlab=\u0026#34;m\u0026#34;, ylab=\u0026#34;Vm\u0026#34;) plot(ptt.spc, log=\u0026#34;x\u0026#34;, main=\u0026#34;PTT\u0026#34;, xlab=\u0026#34;m\u0026#34;, ylab=\u0026#34;Vm\u0026#34;) plot(dcard.spc, log=\u0026#34;x\u0026#34;, main=\u0026#34;Dcard\u0026#34;, xlab=\u0026#34;m\u0026#34;, ylab=\u0026#34;Vm\u0026#34;) 從上圖可以得知，hapax legomena (只出現過一次的單詞) 占所有語料庫的比例都相當的高。接下來，我們可以透過 Vocabulary growth curves (VGC) 來觀察新詞增加的情況。\nVocabulary Growth Curves (VGC) 同樣地，透過 zipfR，我們可以將語料轉成 vgc object。Brown corpus 的資料一樣可以直接匯入：\n1 2 3 4 asbc.vgc \u0026lt;- vec2vgc(asbc_corpus, m.max=2) data(\u0026#34;Brown.emp.vgc\u0026#34;) ptt.vgc \u0026lt;- vec2vgc(ptt_corpus, m.max=2) dcard.vgc \u0026lt;- vec2vgc(dcard_corpus, m.max=2) 來看一下 ptt.vgc 裡面是什麼 :\n1 2 3 4 5 6 7 8 9 head(ptt.vgc) ## N V V1 V2 ## 1 1 1 1 0 ## 2 392 272 221 30 ## 3 783 505 412 49 ## 4 1174 711 566 73 ## 5 1565 906 723 87 ## 6 1956 1080 849 113 以 row 2 為例，表示在前 392 個 token 中，共有 272 個 type，而在其中有 221 個單詞只出現過一次。\n將資料畫成圖表：\n1 2 3 4 5 6 7 8 9 par(mfrow=c(2,2)) plot(asbc.vgc, add.m=1, main=\u0026#34;ASBC\u0026#34;, xlab=\u0026#34;N\u0026#34;, ylab=\u0026#34;V(N)/V1(N)\u0026#34;) plot(Brown.emp.vgc, add.m=1, main=\u0026#34;Brown\u0026#34;, xlab=\u0026#34;N\u0026#34;, ylab=\u0026#34;V(N)/V1(N)\u0026#34;) plot(ptt.vgc, add.m=1, main=\u0026#34;PTT\u0026#34;, xlab=\u0026#34;N\u0026#34;, ylab=\u0026#34;V(N)/V1(N)\u0026#34;) plot(dcard.vgc, add.m=1, main=\u0026#34;Dcard\u0026#34;, xlab=\u0026#34;N\u0026#34;, ylab=\u0026#34;V(N)/V1(N)\u0026#34;) 上圖中顏色較深的曲線是 V，較淺的曲線是 V1。從圖中可以發現 ASBC 與 Brown corpus 的 V1 曲線上升後逐漸平緩，然而 PTT 與 Dcard 的 V1 曲線呈現持續上升的趨勢，意指隨著 sample size 增加，hapax legomena 也會不斷增加。這可能是中文斷詞錯誤所造成 (Hsieh 2014)。為了推得母體的真實情況，接下來將使用 Large-Number-of-Rare-Events (LNRE) models (Baayen 2002)。\nFitting the LNRE Model zipfR 套件中提供了三種 LNRE models，分別是 Generalized Inverse Gauss Poisson (lnre.gigp; Baayen, 2001, ch. 4)、Zipf-Mandelbrot (lnre.zm; Evert, 2004)，和 finite Zipf-Mandelbrot (lnre.fzm; Evert, 2004)，我們首先採用 fzm。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 asbc.fzm \u0026lt;- lnre(\u0026#34;fzm\u0026#34;, spc=asbc.spc) Brown.fzm \u0026lt;- lnre(\u0026#34;fzm\u0026#34;, spc=Brown.spc) ptt.fzm \u0026lt;- lnre(\u0026#34;fzm\u0026#34;, spc=ptt.spc) dcard.fzm \u0026lt;- lnre(\u0026#34;fzm\u0026#34;, spc=dcard.spc) # frequency spectrum asbc.fzm.spc \u0026lt;- lnre.spc(asbc.fzm, N(asbc.spc)) Brown.fzm.spc \u0026lt;- lnre.spc(Brown.fzm, N(Brown.spc)) ptt.fzm.spc \u0026lt;- lnre.spc(ptt.fzm, N(ptt.spc)) dcard.fzm.spc \u0026lt;- lnre.spc(dcard.fzm, N(dcard.spc)) # VGC asbc.fzm.vgc \u0026lt;- lnre.vgc(asbc.fzm, N(asbc.vgc), m.max=1, variances=TRUE) Brown.fzm.vgc \u0026lt;- lnre.vgc(Brown.fzm, N(Brown.emp.vgc), m.max=1, variances=TRUE) ptt.fzm.vgc \u0026lt;- lnre.vgc(ptt.fzm, N(ptt.vgc), m.max=1, variances=TRUE) dcard.fzm.vgc \u0026lt;- lnre.vgc(dcard.fzm, N(dcard.vgc), m.max=1, variances=TRUE) Observed and expected frequency spectra:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 par(mfrow=c(2,2)) plot(asbc.spc, asbc.fzm.spc, main=\u0026#34;ASBC\u0026#34;, xlab=\u0026#34;m\u0026#34;, ylab=\u0026#34;Vm\u0026#34;) legend(\u0026#34;topright\u0026#34;, legend = c(\u0026#34;observed\u0026#34;, \u0026#34;fZM model\u0026#34;), fill = 1:2, cex = 0.5) plot(Brown.spc, Brown.fzm.spc, main=\u0026#34;Brown\u0026#34;, xlab=\u0026#34;m\u0026#34;, ylab=\u0026#34;Vm\u0026#34;) legend(\u0026#34;topright\u0026#34;, legend = c(\u0026#34;observed\u0026#34;, \u0026#34;fZM model\u0026#34;), fill = 1:2, cex = 0.5) plot(ptt.spc, ptt.fzm.spc, main=\u0026#34;PTT\u0026#34;, xlab=\u0026#34;m\u0026#34;, ylab=\u0026#34;Vm\u0026#34;) legend(\u0026#34;topright\u0026#34;, legend = c(\u0026#34;observed\u0026#34;, \u0026#34;fZM model\u0026#34;), fill = 1:2, cex = 0.5) plot(dcard.spc, dcard.fzm.spc, main=\u0026#34;Dcard\u0026#34;, xlab=\u0026#34;m\u0026#34;, ylab=\u0026#34;Vm\u0026#34;) legend(\u0026#34;topright\u0026#34;, legend = c(\u0026#34;observed\u0026#34;, \u0026#34;fZM model\u0026#34;), fill = 1:2, cex = 0.5) Observed and expected VGC:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 par(mfrow=c(2,2)) plot(asbc.vgc, asbc.fzm.vgc, add.m=1, main=\u0026#34;ASBC\u0026#34;, xlab=\u0026#34;N\u0026#34;, ylab=\u0026#34;V(N)/V1(N)\u0026#34;) legend(\u0026#34;topleft\u0026#34;, legend = c(\u0026#34;observed\u0026#34;, \u0026#34;fZM model\u0026#34;), fill = 1:2, cex = 0.5) plot(Brown.emp.vgc, Brown.fzm.vgc, add.m=1, main=\u0026#34;Brown\u0026#34;, xlab=\u0026#34;N\u0026#34;, ylab=\u0026#34;V(N)/V1(N)\u0026#34;) legend(\u0026#34;topleft\u0026#34;, legend = c(\u0026#34;observed\u0026#34;, \u0026#34;fZM model\u0026#34;), fill = 1:2, cex = 0.5) plot(ptt.vgc, ptt.fzm.vgc, add.m=1, main=\u0026#34;PTT\u0026#34;, xlab=\u0026#34;N\u0026#34;, ylab=\u0026#34;V(N)/V1(N)\u0026#34;) legend(\u0026#34;topleft\u0026#34;, legend = c(\u0026#34;observed\u0026#34;, \u0026#34;fZM model\u0026#34;), fill = 1:2, cex = 0.5) plot(dcard.vgc, dcard.fzm.vgc, add.m=1, main=\u0026#34;Dcard\u0026#34;, xlab=\u0026#34;N\u0026#34;, ylab=\u0026#34;V(N)/V1(N)\u0026#34;) legend(\u0026#34;topleft\u0026#34;, legend = c(\u0026#34;observed\u0026#34;, \u0026#34;fZM model\u0026#34;), fill = 1:2, cex = 0.5) 上方的紅色曲線代表透過 fZM model 所產生的 expected value。\nLexical Coverage Estimation Out-Of-Vocabulary (OOV) types 我們可以藉由 Out-Of-Vocabulary (OOV) types 的比例來了解兩個 corpus 的 lexical coverage。基本上，一個實用的語言資源中，OOV 所佔的比例應保持在一定標準之下。\n我們先採前十萬個 lemma：\n1 2 3 4 asbc100k \u0026lt;- head(asbc_corpus, 100000) data(\u0026#34;Brown100k.spc\u0026#34;) ptt100k \u0026lt;- head(ptt_corpus, 100000) dcard100k \u0026lt;- head(dcard_corpus, 100000) 同樣地，將他們轉成 spc object：\n1 2 3 4 5 6 7 asbc100k.tfl \u0026lt;- vec2tfl(asbc100k) ptt100k.tfl \u0026lt;- vec2tfl(ptt100k) dcard100k.tfl \u0026lt;- vec2tfl(dcard100k) asbc100k.spc \u0026lt;- tfl2spc(asbc100k.tfl) ptt100k.spc \u0026lt;- tfl2spc(ptt100k.tfl) dcard100k.spc \u0026lt;- tfl2spc(dcard100k.tfl) 首先，我們要計算 lexical of seen types。在這裡，我們將只出現過一次的 type 都算成 OOV。也就是說，我們想要知道語料中至少出現過兩次的 type 總共有幾個：\n1 2 3 4 asbc_Vseen \u0026lt;- V(asbc100k.spc) - Vm(asbc100k.spc, 1) Brown_Vseen \u0026lt;- V(Brown100k.spc) - Vm(Brown100k.spc, 1) ptt_Vseen \u0026lt;- V(ptt100k.spc) - Vm(ptt100k.spc, 1) dcard_Vseen \u0026lt;- V(dcard100k.spc) - Vm(dcard100k.spc, 1) Fitting the LNRE Model 1 2 3 4 asbc100k.fzm \u0026lt;- lnre(\u0026#34;fzm\u0026#34;, asbc100k.spc) Brown100k.fzm \u0026lt;- lnre(\u0026#34;fzm\u0026#34;, Brown100k.spc) ptt100k.fzm \u0026lt;- lnre(\u0026#34;fzm\u0026#34;, ptt100k.spc) dcard100k.fzm \u0026lt;- lnre(\u0026#34;fzm\u0026#34;, dcard100k.spc) 以 Brown corpus 為例，假設我們用 1, 10, or 100 million tokens 進行計算，expected OOV 分別會是：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # ASBC 1 - (asbc_Vseen / EV(asbc100k.fzm, c(1e6, 10e6, 100e6))) ## [1] 0.7751460 0.7844322 0.7844322 # Brown 1 - (Brown_Vseen / EV(Brown100k.fzm, c(1e6, 10e6, 100e6))) ## [1] 0.7299293 0.7347804 0.7347804 # PTT 1 - (ptt_Vseen / EV(ptt100k.fzm, c(1e6, 10e6, 100e6))) ## [1] 0.8847203 0.9098196 0.9098338 # Dcard 1 - (dcard_Vseen / EV(dcard100k.fzm, c(1e6, 10e6, 100e6))) ## [1] 0.8608032 0.8905452 0.8905602 從上方得到的數值可以發現，ASBC 和 Brown corpus 的 OOV ratio 較 PTT 和 Dcard 來得穩定且比例也較低。\n結論 利用 zipfR 並採用 LNRE model 對資料進行分析，取得語料的 VGC 和 OOV ratio，就可以分析平衡語料庫、Brown corpus、PTT 和 Dcard 的 lexical richness 和 lexical coverage。目前的發現是：\n不同於 ASBC 和 Brown Corpus 最後達成平緩的趨勢，PTT 與 Dcard 的 VGC V1 曲線都隨著 sample size 的增加持續上升。\n從 expected OOV ratio 來看，PTT 與 Dcard 語料的 OOV 除比例較高外，也隨著 corpus size 的增加而持續上升，並不如 ASBC 與 Brown corpus 穩定。\n可能的原因是，ASBC 是機器斷詞後再進行人工校正而成的語料庫，而 Brown Corpus 是英文語料，字詞與字詞之間已有空白分隔，所以這兩個語料庫較無斷詞錯誤導致新詞不斷增加的問題。然而現今的 Web-as-Corpus，其前處理通常採用機器自動斷詞，龐大的 OOV 可能來自於斷詞錯誤。這說明了在建造中文 Web-as-Corpus 時，斷詞問題是很重要的考量之一。\nReferences Baayen, R. H. (2002). Word frequency distributions (Vol. 18). Springer Science \u0026amp; Business Media.\nEvert S, Baroni M (2007). “zipfR: Word Frequency Distributions in R.” In Proceedings of the 45th Annual Meeting of the Association for Computational Linguistics, Posters and Demonstrations Sessions, 29–32. (R package version 0.6-70 of 2020-10-10).\nKilgarriff, A., \u0026amp; Grefenstette, G. (2003). Introduction to the special issue on the web as corpus. Computational linguistics, 29(3), 333-347.\nHsieh, S.-K. (2014, may). Why Chinese Web-as-Corpus is Wacky? Or: How Big Data is Killing Chinese Corpus Linguistics. Paper presented at the Proceedings of the Ninth International Conference on Language Resources and Evaluation (LREC?14), Reykjavik, Iceland.\nSpecial Thanks 謝謝 Jessy 和 Yongfu 在 HOCOR 2020 提供的 corpus data。\nClick here for poster version (made with posterdown)\n","date":"2021-01-10T00:00:00Z","image":"https://andreashih.com/blog/p/ptt-%E8%88%87-dcard-%E8%AA%9E%E6%96%99%E6%96%B7%E8%A9%9E%E5%95%8F%E9%A1%8C%E6%8E%A2%E8%A8%8E/cards2_huc14db8602424c01ed8222bb83da94154_41647_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/ptt-%E8%88%87-dcard-%E8%AA%9E%E6%96%99%E6%96%B7%E8%A9%9E%E5%95%8F%E9%A1%8C%E6%8E%A2%E8%A8%8E/","title":"PTT 與 Dcard 語料斷詞問題探討"},{"content":"推甄季就在轉角處，忽然驚覺我推甄研究所已是兩年前，在臺大也不知不覺待了一年。最近陸陸續續有學弟妹問我推甄臺大語言所的小撇步，所以在這裡整理成一篇比較輕鬆的 Q\u0026amp;A 給大家參考，希望能稍微消除一點緊張的心情（雖然我也知道很難！）\n當初為什麼推甄語言所？ 在誤打誤撞考進外文系之前，我完全不知道語言學是什麼。直到大二修了淑瑛老師和 Sherry 老師的語概，相見恨晚驚為天人，從此踏上語言學之路。大一大二有想過念研究所的可能，大三時在淑瑛老師的指導下，參與科技部大專生研究計畫，才確定畢業後繼續升學。\n幾月開始準備？ 我是八月開始。一開始在網路爬文，還有看語言所前一年的推甄簡章，確定要準備的資料，並估計繳件/筆試/面試日期。真正如火如荼準備則是繳件前一個月。\n推甄到底要怎麼準備？ (1) 準備一個漂亮的 GPA\u0026hellip;（開玩笑）\n跟我比較熟的人應該都知道，我大學時重視 GPA 到有點過頭的程度。我有修教育學程，所以每學期學分都很多，花在做報告和準備考試的時間也很長。但是 GPA 並不是唯一的標準，希望大家不要跟我一樣走火入魔（健康要顧！），如果有一些跟語言學有關的實習經驗更好。\n(2) Study Plan\n我的 study plan 整整寫了一個月。一開始是先整理自己的經歷，幫助自己扣回推甄語言所的動機。具體寫出在語言學中感興趣的領域，如果有實習、科技部計畫，或參加研討會的經驗也可以寫進去。我的 study plan 採中規中矩風（其實是自己沒什麼設計能力），寫了一篇類似寫作課的 essay，列點描述自己的背景、專長、興趣和經驗，每一個點都詳細描述，寫完一段落就停下來看看自己有沒有呼應主題XD\n當初寫好 study plan 之後，我有寄給淑瑛老師、Sherry 老師和祁芳老師，請老師們幫我看，老師們也給我很多建議。真的非常感謝三位老師的幫忙！\n(3) 研究報告\n我直接交了大專生計畫的 proposal。如果沒有做大專生計畫，可以交寫作課你寫過最讚的一篇 essay，但最好跟語言學有點關係。如果你不是外文系，那可能要自己寫一篇囉！\n(4) 推薦函\n一定要提早請老師幫忙！我一開學就去辦公室找老師，請老師幫我寫。我個人覺得要請跟自己最熟的老師寫，所以我請指導老師淑瑛老師、語音學老師 Sherry 老師，和班導祁芳老師幫我寫推薦函。學校可能會有固定的推薦函格式，務必要先看清楚，還有確定繳件方式。\n科技部大專生計畫一定要做嗎？ 不一定，如果你有其他專長和經歷，也很有可能被錄取。但是我是做了大專生計畫才確定要讀研究所，所以趁著大學時跟著老師做研究，提前體驗 meeting 的感覺，也是很棒的經驗！\n必讀書單？ 我\u0026hellip;沒有\u0026hellip;必讀書單\u0026hellip;因為我只讀完系上用的 Language Files。但是我有做一些 An Introduction to Language 的習題。\n筆試要怎麼準備？ Language Files 好好讀完，行有餘力看一些 paper。如果你有做大專生計畫，可以試試在找資料時，把 paper 裡的重點寫成自己的筆記。雖然很難，但蠻有用的，我自己也還在練習。另外，我寫了一些臺大語言所考試入學的筆試題目，但我這一屆推甄筆試考的是比較大方向概念性的語言學議題，所以不算完美猜題成功。最重要的是，如果你是外文系的話，寫作課 essay 一定要認真寫，peer review 跟老師的 comments 要仔細看！平時練筆真的很重要！\n面試的方向是什麼？是全英文嗎？ 當初面試臺大，自我介紹用英文，其他問題用中文。但聽說 R09 的學弟妹面試時其他問題也有用到英文，只能說每屆不一定。Study Plan 一定要好好寫！老師可能會從裡面問問題。\n怎麼選學校/指導老師？ 看各校網站。各校的語言所網站都會有入學資訊、研討會資訊，還有老師的專業領域。仔細看過一輪就會知道各校的研究方向，也會比較確定該找哪一位指導老師。\n碩班才學程式會不會很吃力？ 會\u0026hellip;真的會\u0026hellip;\n高中數學補考邊緣的我如果知道碩班會用到數學和程式，一定會大哭說我不要！奉勸各位學弟妹不要跟我一樣從小死讀書到大，要好好探索自己的專長和興趣，提前做準備也能表現得更好。但往好處想，就算繞了遠路，途中累積的經驗也是很珍貴的！\n以上是目前整理的問答集，如果有其他疑問，可以留言或私訊給我，我會隨時更新 QA 的內容。如果有語言所朋朋看到這篇文章，也可以給我一些建議！\n祝大家推甄一切順利！\nPhoto by Andy Wang on Unsplash\n","date":"2020-08-26T00:00:00Z","image":"https://andreashih.com/blog/p/%E8%87%BA%E5%A4%A7%E8%AA%9E%E8%A8%80%E6%89%80%E6%8E%A8%E7%94%84%E6%BA%96%E5%82%99/ntu_hud74cf10940e7819ee6d533b85b82bf1f_199831_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/%E8%87%BA%E5%A4%A7%E8%AA%9E%E8%A8%80%E6%89%80%E6%8E%A8%E7%94%84%E6%BA%96%E5%82%99/","title":"臺大語言所推甄準備"},{"content":"I am writing this post not because I was hacked or accidentally forgot the password to the dazzling world of social media. Actually, I have my account logged in readily. All I have to do is to pick up my phone and click on the pink bright little icon right on the home screen. Instagram takes you to places you\u0026rsquo;ve been long to, gives you access to peak lives of others (whether familiar or unfamiliar), and offers you tons of dopamine that keep you excited. Though it seems no problem with instagram participating in my leisure time, the hidden risk has gradually dominated my daily life. Now I am going to share with you how I was aware of the impact of insta and how I finally took back my insta account.\nAn Ordinary Night It was an ordinary night. Like any other typical night after I came back to my dorm. Even though I was exhausted and really needed a cold shower, I\u0026rsquo;d lie on my mattress, hold my phone in hand, and swipe instagram page for thirty minutes or so. After checking friends\u0026rsquo; stories and posts, I clicked on the magnifying glass icon to find something interesting. All of a sudden, it struck me that I was not happy with it anymore. All I got from scrolling was emptiness. I was jealous of people enjoying vacations. I even criticised myself seeing pictures of beautiful girls. The worst thing was that I had wasted a bunch of time that I could have read a book, worked on a project, or simply got a good night\u0026rsquo;s sleep.\nReflection The first thing I did in the morning was to wake up my phone and tapped on insta for no reason. The last thing I did at night was to scroll insta to my heart\u0026rsquo;s content, there\u0026rsquo;s no reason either. Sometimes when I felt like posting a story, I spent time coming up with the best filter, gifs, and caption. After I posted, I worried about others\u0026rsquo; opinions toward my story. Was I happier with the accompany of instagram? The answer was definitely no. But why was I so stuck on this cute evil platform? I found no reason. Therefore, the practice of quitting instagram has started to take back my life.\nWhat I Have Done The first thing I did was to replace the insta icon with a crossword game. Whenever I felt the urge to click on instagram, I tapped on the same position and opened a crossword. I also set rules for myself. The only pastime I could do on my phone was watching YouTube videos. It was really painful to kick a habit in the beginning. After all, I had been addicted to insta for more than 3 months. I was so eager to get rid of instagram that guiltiness surged over me when I accidentally click on the pink icon. After three days of hard work, I found a more peaceful way to deal with my addiction. Whenever the idea of browsing insta popped up, I admitted it and let the thought run in my head. I\u0026rsquo;d asked myself three questions: a) why I have to use insta, b) am I happy with browsing insta, and c) what I can do if I save these scrolling time. The truth was that if I blamed myself for having these thoughts, things got worse and I felt more terrible (see the ironic process theory).\nAnother Reflection The three questions I asked myself led to the same conclusion: I was afraid of failures. It seemed ridiculous, but it was real. I was afraid of not doing well on studies or projects, so I hid in a virtual world where anxiety was covered by eye-catching pictures and videos (although they did bring much more anxiety that I was not aware of). Gliding the smooth turf was way more soothing than thinking or solving problems. I could have kept this habit and lived happily (but boringly). However, I was not satisfied with it, so the loop kept going.\nAnd Now\u0026hellip; After talking to myself for one or two weeks, I finally face my weaknesses regarding social media addiction. At present, instagram seldom pops up in my head. We have reached a peaceful balance. It feels really powerful and satisfying when things are getting in control. I no longer feel itchy when seeing those bright pink circles on the homepage. I can enjoy me-time without pictures and memes sparkling like a haunted nightmare. I can do whatever I want without insta, and it does no harm to my life (actually it has been better without its harassment). I don\u0026rsquo;t agree that hiding from social media is the most ideal choice. After all, social media provides the most instant way to build connections with friends and families. However, I learned that it is important to give myself a break. All these struggles of dealing with insta addiction have put me back in the driving seat of my body, mind, and spirit.\nPhoto by Jakob Owens on Unsplash\n","date":"2020-08-10T00:00:00Z","image":"https://andreashih.com/blog/p/how-i-took-back-my-ig-account/ig_hu39445800be1ddc4aeaa235ad8c5ce0f5_74030_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/how-i-took-back-my-ig-account/","title":"How I Took Back My IG Account"},{"content":"對台大語言所碩一的同學們來說，下學期的重頭戲無疑是田野調查。這門讓大家期待了大半年的課程果真充實無比，田調的過程更是充滿驚奇與挑戰。這學期我們學習了魯凱語，課程一開始老師請了族語老師到所上讓我們採集語料。較熟悉魯凱語，也寫了兩篇小分析後，五月底便啟程到部落進行五天四夜的田野調查。\nDay 1 我們這組被安排進行田調的耆老是一位牧師。牧師和妻子一同接受我們採訪，在開始之前，牧師妻子問我們介不介意在開始前禱告。禱告時牧師妻子的話語平復了上午舟車勞頓的煩擾。後來詢問老師才知道，部落的牧師們是經常被請來做田調的耆老。因為傳教需求，牧師通常精通族語和中文。在田調的過程中，牧師一字一句仔細發音給我們聽，也會寫羅馬拼音給我們看，還會幫我們聽發音。聚精會神之下 3 小時飛快地過去，來到微涼的傍晚。山嵐滾滾而來，如臨幻境。\nDay 2 因為前一晚轉寫到深夜，早上被音樂叫醒時，朦朧中忘了自己身在何處，此時部落裡的族語廣播提醒了我正在霧台山中。從住處走到田調場地的路上，看到了一片紅藜田。紅藜營養價值豐富，與小米及芋頭並列魯凱人的三大主食。\n走在石板路上，放眼望去盡是一片片碧綠層疊，天空藍得不可思議。路旁有著立體的陶壺裝飾，陶壺在魯凱文化中具有重要象徵意義，也是貴族的婚禮聘禮之一。\n上午被安排到與熟悉的族語老師田調，在舒適圈裡的四人拼命問問題，累積了如霧台山一般高的語料。下午我們遇到了一位村長，村長看起來略有些嚴肅，但似乎被組員們的歡笑感染，很開心地度過了三小時的田調。我們也得知了大部分耆老對於我們學習魯凱語十分贊同，也很好奇我們為什麼要學習魯凱語，更對我們能說出幾個魯凱語詞彙感到驚奇。部落裡的年輕人多半不會說族語，我們雖然只是魯凱語門外漢，但田調留下來的資料也許能為語言保存盡一份心力。\n傍晚降下突如其來的大雨，像是巨大水盆傾瀉而下，雨水讓整座山蓋上一片白茫。\nDay 3 早上六點半的廣播將我們從睡夢中喚醒。到了第三天，田調旅程過了一半，大家也開始緊張收不到自己想分析的語料。今天我們終於向其他組同學口中幽默風趣的代表收到語料。田調開始前，代表帶我們一起禱告。代表的田調風格確實與眾不同，聽到我們的例句後會代入情境。例如：「我累到極致」的族語是 kuaalriaku turamuru。代表表示強調累的程度時，kuaalriaku 的第一個 /a/ 會加重並拉長。他先示範一次給我們聽，再讓我們分別練習說「我很累」、「我超級累」、「我累到不行」。代表除了田調風格輕鬆詼諧外，更是妙語如珠。以下節錄代表的哲思語錄：\n心情放鬆就是休息，休息的時候心情沒有放鬆還是在工作。\n這個罰對我來說是沒有的，罰對我來說是進步。\n晚餐我們吃到了魯凱族傳統美食 cinabu (吉拿富)。cinabu 的內餡通常是豬肉、小米粉及芋頭粉等食材，外層以假酸漿葉包覆，可以食用。最外層則使用月桃葉包裹，再用月桃繩束起，如下圖右下所示。\nDay 4 今天早上沒有被廣播叫醒，而是被聖歌喚醒。族語老師告訴我們魯凱族人多是虔誠的基督教徒，我們住的石板屋裡也掛有聖經詩篇。今天是得知最多魯凱文化的一天，以下分類敘述之：\n婚姻 據族語老師所述，魯凱族在台灣原住民族中屬於較保守的族群，尤其以霧台魯凱人最為傳統，男女分際最為分明。村長告訴我們傳統魯凱族的年輕男女是不能互相自由談話的，若兩人有意結姻緣，必由一「橋樑」(watalutaludru) 幫助兩人走向婚姻。並且，一個女子可以有許多男子追求。\n傳統的魯凱年輕男女在結婚前有一個類似相親的社交活動 mauapapalange。村長表示這是 20 年前才有的習俗，現今年輕族群大多已採自由戀愛。村長告訴我們，女主角在 mauapapalange 時心中雖有屬意之人，但仍須對在場所有男性表示友好。此時「橋樑」(watalutaludru) 會發揮其功力，促成兩人結為連理。我們問道，那麼橋樑要怎麼知道女主角心中所愛是在座的哪一位呢？村長說：「所以橋樑很厲害啊！」。由此可見「橋樑」在 mauapapalange 中扮演極為重要的角色。\n參訪魯凱文物館時，耆老的女兒，同時也是文物館導覽員，向我們介紹了 mauapapalange 的細節與過程。mauapapalange 並非一對一的相親，而是由男女主角各自邀請男生及女生朋友一同參加。mauapapalange 的地點會選在女生家中，座位配置如下圖：\n年輕的男女會坐在石椅上，且男女壁壘分明。長輩則會坐在前方，有監督的作用。\nmauapapalange 在魯凱文化中是由男方主動，男主角的男生朋友們 (lamalala) 會唱歌，或表演鼻笛。此時唱的歌謠為重唱形式，旋律在第一個人唱之後，其他人都能隨後接下去，因為大家從小到大都聽這些歌謠。歌曲結束時全部的人會一起收尾，據文物館導覽員所述，那種全體整齊一氣呵成的收尾是相當美妙的。歌謠類似中國戲曲的曲牌，歌詞可以修改，以表達對於女主角的愛慕，且歌詞的押韻相當重要。男主角有時候會找特別會唱歌或演奏鼻笛的樁腳，但是這麼做的風險是「女生的心有可能會往另一條道路走」。\n女主角的女生朋友們 (laalialili) 則會編花環，有香水與美觀的作用。檳榔和花生也是 mauapapalange 中常見的食物。在歌唱的過程中，長輩若發覺歌詞用語不當，會用唱的提醒年輕人。導覽員向我們解釋，那像是「不帶髒字的罵人」。\n魯凱族為父系社會，家產主要由男子繼承。貴族女生嫁給平民就不能繼承家產，且位階會被降級。我們提問了婚禮盪鞦韆的習俗，村長解釋只有當家頭目辦婚禮時會盪鞦韆，一般魯凱族人並沒有。\n音樂 老一輩魯凱族認為音樂屬於男性，女性要學習則會被質疑。在文物館中，導覽員向我們介紹魯凱族的傳統樂器──鼻笛。鼻笛是在 mauapapalange 中常見的樂器，聲音厚實而悠遠，有如山谷之音，帶有古老的韻味。\n菸斗 魯凱族的菸斗男女都可抽，有時小孩也可以抽。因其為貴重物品，只有少數人持有，可以表達對珍愛之人的心。\n建築 魯凱族的傳統建築為石板屋，是族人取得石板後經處理堆疊而成。若屋外有石椅，則是頭目家屋，因為頭目會在戶外石椅負責調解。\n石板屋有天窗，讓光線得以透進室內。\n魯凱族精於雕刻，家屋內外都有雕刻藝術。平民家屋的雕刻與貴族家屋的不同，而貴族家屋的雕刻又不可和頭目相同。\n習俗與宗教 族語老師介紹道，魯凱族人認為百步蛇是同伴，因此百步蛇的族語和同伴皆為 palrata。百合花 (bariangalai) 則為魯凱族人的精神象徵，代表著貞潔與崇高。女子佩戴百合花代表其莊重有德，勇士則須獵五隻山豬，方能配戴一朵百合，而紅心百合只有頭目能配戴。琉璃珠 (kasiluane) 是珍貴的飾品，只為貴族所擁有。\n與村長談話時，組員詢問魯凱族是否還有巫師習俗。村長表示 70 年前因基督教傳入部落，就沒有巫師，舊有的生死概念也被基督教所改變。\n語言 村長坦言自己擔心 20 年後魯凱語會消失，因為 40 歲以下的魯凱人在現代幾乎不會說族語。我們在田調過程中發現村長及牧師說的族語，和族語老師及代表說的似乎不大一樣。村長也認為年輕人的魯凱語像是「另外發明的一種話」。\n第四天的尾聲，村長表示很喜歡我們，想跟我們一直待在一起，讓組員們很是感動。村長對我們說：\n我們不要互相忘記！　當下直覺想到魯凱的語法 (例如：互相喜歡 makadalame)，但更多的是言語無法形容的溫暖的感受。透過與耆老的互動，彷彿與魯凱語有了連結，語言頓時鮮活了起來。\nDay 5 車子緩緩開下山，司機在這幅景象前特別停下來讓我們拍照。自然的壯闊之美盡收眼底，旅程也到了尾聲。從美麗的部落回到喧嚷的都市，不免常常想起那座山，那道陽光，與那些人。\n後記 回到語言所的教室，老師在最後一堂課對我們說的話讓我印象深刻。老師告訴我們，學習就是放下過往的認知，從零開始。老師真切地做到了這點：每次採集語料，老師都會和我們一同做筆記，仔細程度完全看不出老師曾經做過兩次魯凱語田調。老師也告訴我們，要開闊視野，用心去聽、看文化。這也是帶我們到部落田調的原因。我們在台北的教室裡憑空幻想一個部落，部落裡的族人說著魯凱語，但那終究只是想像。實地觀察語言如何被使用，才能真正窺得語言的面貌。\n","date":"2020-07-03T00:00:00Z","image":"https://andreashih.com/blog/p/%E9%9C%A7%E5%8F%B0%E9%AD%AF%E5%87%B1%E8%AA%9E%E7%94%B0%E9%87%8E%E8%AA%BF%E6%9F%A5/budai_hu311f12d430cc6afcb9fdc54b64cd21d5_99440_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/%E9%9C%A7%E5%8F%B0%E9%AD%AF%E5%87%B1%E8%AA%9E%E7%94%B0%E9%87%8E%E8%AA%BF%E6%9F%A5/","title":"霧台魯凱語田野調查"},{"content":"這學期 (108-2) 修大學部的 python 課程，在期末用 python-docx 搭配 python 內建函式庫做了一個迷你專案。\n最初的想法如下圖：\n專案發想 Code 1 2 3 4 5 6 7 8 import os import os.path from os import path import docx from docx import Document import re import shutil from shutil import copyfile 使用者輸入原資料夾所在的路徑。若路徑存在則將 working directory 設為使用者輸入的路徑，若路徑不存在則印出警告訊息。\n1 2 3 4 5 6 7 path1 = \u0026#39;123\u0026#39; while path.exists(path1) == False: path1 = input(\u0026#39;Please enter the location of the original files:\u0026#39;) if path.exists(path1): os.chdir(path1) # Set working directory else: print(\u0026#39;Warning: Invalid path\u0026#39;) 使用者輸入關鍵字（可接受 regular expression），並將含有其關鍵字的 .docx 檔案存到 matched_files 中，再做出各個含有關鍵字檔案的路徑，存到 matched_files_paths。\n1 2 3 4 5 6 7 8 9 10 # A function that extracts files that match the pattern def search_file(filename, pattern): doc = docx.Document(filename) text = [] for para in doc.paragraphs: text.append(para.text) if re.findall(pattern, str(text)) != []: return filename else: return 0 1 2 3 4 5 6 7 8 # Search docx files with content matching particular pattern pattern = input(\u0026#39;Please enter the keyword\u0026#39;) matched_files = [] for file in os.listdir(): if not file.endswith(\u0026#39;.docx\u0026#39;): continue x = search_file(file, pattern) if x != 0: matched_files.append(x) 1 2 3 4 5 # Extract matched files path matched_files_paths = [] for matched_file in matched_files: path = f\u0026#34;{path1}\\\\{matched_file}\u0026#34; matched_files_paths.append(path) 有了 matched_files_paths，就可以對含有關鍵字的 .docx 檔案進行操作。使用者可以輸入 move 或 copy，再輸入新路徑（欲移動或複製至哪一個資料夾），或是直接輸入 delete，將含有關鍵字的 .docx 檔案刪除。\n1 2 3 4 5 6 7 8 9 10 # A function that manipulates files (move, copy, or delete) def file_manipulate(mode, matched_file_path, to): if mode == \u0026#39;move\u0026#39;: shutil.move(matched_file_path, to) elif mode == \u0026#39;copy\u0026#39;: shutil.copy(matched_file_path, to) elif mode == \u0026#39;delete\u0026#39;: os.remove(matched_file_path) else: return \u0026#39;no such mode\u0026#39; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 mode = \u0026#39;123\u0026#39; while mode not in [\u0026#39;move\u0026#39;,\u0026#39;copy\u0026#39;, \u0026#39;delete\u0026#39;]: mode = input(\u0026#39;move, copy, or delete?\u0026#39;) if mode == \u0026#39;delete\u0026#39;: to = \u0026#39;\u0026#39; for matched_file_path in matched_files_paths: file_manipulate(mode, matched_file_path, to) elif mode in [\u0026#39;move\u0026#39;, \u0026#39;copy\u0026#39;]: to = input(\u0026#34;Please provide the new file path\u0026#34;) if path.exists(to) == False: print(\u0026#39;Warning: Invalid path\u0026#39;) else: for matched_file_path in matched_files_paths: file_manipulate(mode, matched_file_path, to) else: print(\u0026#39;Warning: Invalid mode\u0026#39;) Murmuring 真心覺得對初學者來說，盡量不要同時學兩個程式。資質駑鈍如我無法同時參透兩個語言，因此這學期就是不斷把 R 寫在 python 裡或把 python 寫在 R 裡。寫完一整天的 python 要再回去寫 R，簡直像濃霧中漫步伸手不見五指。順攝抑制和倒攝抑制在我身上嶄露無遺。所以學程式不要貪快貪多，會消化不良（倘若列位看官是程式小天才則另當別論）。像這個簡單的小專案就讓我做了超級久（從適應 python 語法到寫出好像可以 run 的東西），而且還不大完善。最好的方式就是早一點開始學，不要像我一樣 code 到用時方恨少！\n參考資料 Search all docx files with python-docx in a directory (batch)\nSearching docx Files in python\nHow to use regular expressions with python docx?\nHow to Create, Move, and Delete Files in Python\nPhoto by Iñaki del Olmo on Unsplash\n","date":"2020-06-29T00:00:00Z","image":"https://andreashih.com/blog/p/docx-files-search-and-manipulation/books3_hu1e561492c4c7b0ba991f75042a1b6a75_160947_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/docx-files-search-and-manipulation/","title":"DOCX Files Search and Manipulation"},{"content":"最近在老師的研究安排下讀了 How to do Linguistics with R 的第十二章 Probabilistic multifactorial grammar and lexicology: Binominal logistic regression。本章介紹了如何以 logistic regression 解釋並預測兩個近似詞的使用情形。接下來將使用 Rling 中的資料集 nerd 做練習。\n1 2 3 4 5 6 7 8 # Following the instructions of the book: # install.packages(c(\u0026#34;rms\u0026#34;, \u0026#34;visreg\u0026#34;, \u0026#34;car\u0026#34;)) # To install `Rling`: # install.packages(pkgs = file.choose(), repos = NULL, type = \u0026#34;source\u0026#34;) library(Rling) library(rms) library(dplyr) library(ggplot2) 取得 Rling 中的資料集 nerd 1 2 3 4 5 6 7 8 data(nerd) summary(nerd) ## Noun Num Century Register Eval ## geek:670 pl:436 XX :515 ACAD: 54 Neg :132 ## nerd:646 sg:880 XXI:801 MAG :622 Neutral :896 ## NEWS:343 Positive:288 ## SPOK:297 資料視覺化 由下圖所示，在 20 世紀時，nerd 出現的次數比 geek 多。但在 21 世紀，geek 的使用次數超過前一世紀的兩倍，而 nerd 在兩世紀的次數無明顯差異，因此 geek 在 21 世紀的出現次數超過 nerd。\n1 2 3 4 5 6 nerd %\u0026gt;% group_by(Noun, Century) %\u0026gt;% count(Noun) %\u0026gt;% ungroup() %\u0026gt;% ggplot(aes(Century, n, fill = Noun)) + geom_bar(position = \u0026#34;dodge\u0026#34;, stat = \u0026#34;identity\u0026#34;, width = 0.3) 接下來看看不同世紀使用 nerd 與 geek 時的 polarities。可以發現不論在 20 或 21 世紀，使用 nerd 和 geek 時大部分都是 neutrual polarity。特別的是，geek 在 21 世紀時被使用於 positive polarity 的次數很高。\n1 2 3 4 5 6 7 nerd %\u0026gt;% group_by(Noun, Century, Eval) %\u0026gt;% summarise(n = n()) %\u0026gt;% ungroup() %\u0026gt;% ggplot(aes(Noun, n, fill = Eval)) + facet_wrap(~Century) + geom_bar(position = \u0026#34;dodge\u0026#34;, stat = \u0026#34;identity\u0026#34;, width = 0.5) 因為好奇，到 Cambridge Dictionary 上查了兩字的釋義：\nnerd (n.)\n(1) a person, especially a man, who is not attractive and is awkward or socially embarrassing\n(2) a person who is extremely interested in one subject, especially computers, and knows a lot of facts about it\ngeek (n.)\nsomeone who is intelligent but not fashionable or popular\n看起來 geek 似乎真的比 nerd 還來得正面一些，至少有 intelligent 的部分~\n再看看兩詞在不同領域中的使用情形。在 20 與 21 世紀，geek 和 nerd 出現次數於學術領域最少，雜誌最多，而新聞又比口語多一些。且 21 世紀時， geek 在雜誌出現的次數增加許多。\n1 2 3 4 5 6 7 nerd %\u0026gt;% group_by(Century, Noun, Register, Eval) %\u0026gt;% summarise(n = n()) %\u0026gt;% ungroup() %\u0026gt;% ggplot(aes(Register, n, fill = Noun)) + facet_wrap(~Century) + geom_bar(stat = \u0026#34;identity\u0026#34;, width = 0.4) Logistic Regression Model 試著用書上的方式 (p.258) 跑 lrm。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 m.lrm \u0026lt;- lrm(Noun ~ Num + Century + Register + Eval, data = nerd) m.lrm ## Logistic Regression Model ## ## lrm(formula = Noun ~ Num + Century + Register + Eval, data = nerd) ## ## Model Likelihood Discrimination Rank Discrim. ## Ratio Test Indexes Indexes ## Obs 1316 LR chi2 180.32 R2 0.171 C 0.687 ## geek 670 d.f. 7 g 0.905 Dxy 0.374 ## nerd 646 Pr(\u0026gt; chi2) \u0026lt;0.0001 gr 2.471 gamma 0.394 ## max |deriv| 3e-08 gp 0.200 tau-a 0.187 ## Brier 0.219 ## ## Coef S.E. Wald Z Pr(\u0026gt;|Z|) ## Intercept 1.5038 0.3515 4.28 \u0026lt;0.0001 ## Num=sg -0.2724 0.1291 -2.11 0.0348 ## Century=XXI -0.8063 0.1220 -6.61 \u0026lt;0.0001 ## Register=MAG -0.7457 0.3208 -2.32 0.0201 ## Register=NEWS -0.5962 0.3301 -1.81 0.0709 ## Register=SPOK -0.5729 0.3310 -1.73 0.0835 ## Eval=Neutral 0.0991 0.1942 0.51 0.6098 ## Eval=Positive -1.5084 0.2375 -6.35 \u0026lt;0.0001 ## Model Likelihood Ratio Test 從 Model Likelihood Ratio Test 的欄位中，可以得知 p-value 小於 0.05，代表這個 model 的顯著。\nDiscrimination Indexes 在 Discrimination Indexes 欄中可以看到 R2 值。R2 值介於 0 和 1 之間，這個 model 的 R2 值為 0.171，代表預測能力低。但書中提到 logistic regression 的 R2 值通常會比 linear regression models 的來得低，因此並不建議採用 R2 值作為評斷。\nRank Discrim. Indexes 在 Rank Discrim. Indexes 欄中，C 代表 concordance index (一致性指數)，說明 model 的預測能力。表中可見 C = 0.687，預測能力普通。\nCoef 接著來到 Coef 欄。以變數 Register 為例，ACAD 是 reference level，因此不在表上。與 ACAD 差異最大的是 MAG（Coef = -0.7457），其中 p = 0.0201 (\u0026lt;0.05) 代表顯著。\nCentury=XXI 的 Coef = -0.8063，表示 nerd 對 geek 的 odds 在 21 世紀降低了。也可以說，geek 在 21 世紀時出現次數較 nerd 頻繁。\n相較於 Eval=Neutral，Eval=Positive 的 Coef 更小且為負數，表示 geek 在使用上較 nerd 有更多 positive connotation。\nNum=sg 的 Coef = -0.2724，表示 geek 較 nerd 更常以單數出現。\nMurmuring 照著書上的步驟跑了一個 Logistic Regression Model，但卻不大懂數值所代表的意義，重複讀了很多遍才稍微了解一點點。統計知識真的要補足啊！\nPhoto by James Pond on Unsplash\n","date":"2020-06-03T00:00:00Z","image":"https://andreashih.com/blog/p/nerd-vs.-geek/nerd_hu4e434a66b0883a87c98d5fd4f61a632d_79310_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/nerd-vs.-geek/","title":"Nerd vs. Geek"},{"content":"提到音樂劇，最經典的印象大概是演員走一走突然開始跳舞，講一講突然開始唱歌。和我年紀相仿的同學們，第一部觀賞的音樂劇電影很有可能是音樂老師在課堂上播放的《真善美》或《歌劇魅影》。小時候不大懂這種表演類型，沒有好好欣賞研究，只覺得歌曲好聽，卻不了解音樂跟劇本身的連結。直到大學，在系上風氣促使之下，我才真正變成一個業餘音樂劇迷。從中山外文畢業的學生們或多或少都接受過音樂劇的薰陶，每年五月演出的大英劇華麗炫目，台上台下外文學子們的貢獻促成了劇場的成功。即使深刻地了解自己並不是劇場人才，在大學時接觸音樂劇的經驗也為我帶來許多啟發。這篇文章是我的劇場回憶錄，文末也推薦了我最喜歡的三部音樂劇。\n音樂劇的組成 The overture is about to start,\nYou cross your fingers and hold your heart,\nIt\u0026rsquo;s curtain time and away we go,\nAnother op\u0026rsquo;nin\u0026rsquo;, another show. \u0026ndash; Kiss Me Kate\n一齣音樂劇可以用簡單的三個字囊括：歌、舞、戲。歌曲部分我最喜歡的是劇開始前的 overture，有些劇的 overture 類似劇中所有歌曲的 medley（歌曲大串燒），聽完正好累積滿滿的期待開始觀賞。舞蹈的部分最能代表整齣戲的風格，但說來慚愧，經過八個月的大英劇訓練，我的肢體仍然非常不協調。音樂劇中最扣人心弦的戲結構如下：\nPrologue Act 1 Scene 1-5 Intermission Act 2 Scene 6-10 Epilogue Encore Curtain call 而音樂劇的誕生除了演員外，背後還有一群強大的製作群與幕後團隊。根據參與系上演出的經驗，職務通常包括導演、副導、製作、舞監、舞台助理、音效、佈景、服裝、大小道具、動畫、燈光、招待、總務、劇務、美宣、網宣。音樂劇的舞台搭建更是一門學問，光是地板上的黑膠就讓演員及幕後人員舖了一整晚（真的很重）。最有趣的應屬煙霧機，放煙霧時特殊的味道，聞久了覺得其實蠻好聞的。\n2018 中山外文大英劇 我的劇場經驗較同屆的同學晚了一整年。大部分有志參與大英劇的同學會在一年級當舞台助理，二年級上台演出，並在三年級擔任製作群。而我則是在大三直接參加演員甄選。2018 演出的是 Grease，一齣活潑熱情的美式校園劇。音樂是我很喜歡的 1950s 風格，因此每次最期待的就是練唱。圖中大家身上的禮服出現在劇中最經典的 prom 一景，女演員手上都戴著 corsage，復刻 50 年代美國高中舞會。\n以下是我在大英劇訓練下習得的一些特殊技能，雖然跟劇沒有直接關係，但下戲後仍牢牢地嵌在我的生活經驗裡。\n快速換裝技能 在各個 scene 之間常常需要換裝，但時間往往不到兩分鐘。因此演員都學會了如何快速剝去上一場的戲服再踩進下一場的衣服。「踩」這個動詞最能描述當時的情境。換裝 partner 會幫你將戲服攤開在地上，因此只要踩進去，拉上來，就可以到台上 stand by 了。最高紀錄從洋裝換禮服再戴上配件甚至不到三十秒就完成。從此之後，我換衣服的速度變得極快，也因此有更多時間可以賴床。\n零碎時間運用 英劇練習幾乎佔滿了平日所有晚上及週末兩整天，這對當時仍是 GPA 小偷的我來說是一大挑戰。因此我學會了如何逐水草而讀書，例如：吃完飯在化妝間讀書，休息時間在走廊站著讀書，練習開始前坐在地上用鞋盒當桌子讀書。當時也練就了快速專心的技能，但凡事都有過與不及，下戲後我反而不知道該如何在一大塊完整的時間內讀書。此事困擾我許久，至今雖然大致解決，但仍留有一點後遺症。\n我心目中的音樂劇 Top 3 因為熱愛音樂，在接受大英劇訓練後開始以不同角度欣賞音樂劇中的樂曲。以下將介紹我心目中的音樂劇 Top 3 以及其中我最喜歡的曲目。\n《芝加哥》Chicago 犯罪與貪婪，是《芝加哥》的兩大關鍵字。爵士曲風讓整齣戲多了一股詭譎卻詼諧的黑色幽默。And All That Jazz 中長號的拖拉與鋼琴的清脆呈現出對比，拉開一樁驚世駭俗謀殺案的序幕。All I Care About 中男主角的口哨 solo 和女主角 Roxie 獨唱的 Nowadays 也充分呈現出「拖拉」的特色：轉音、滑音及後半拍的運用。Renée Zellweger 慵懶甜美的唱腔精準詮釋天真又危險的 Roxie，帶有不疾不徐，蔑笑人生百態的韻味。\n《吉屋出租》RENT RENT 劇中角色秉持著自由、藝術與愛，面臨了人生的不同轉折。除了搖滾，作曲家 Jonathan Larson 也在序曲 Seasons of Love 中加入了福音元素。Light My Candle 及 Tango: Maureen 皆是富有劇情的男女對唱。Light My Candle 描述戀情初萌芽的情侶彼此試探，男女主角一人一句，節奏明快地串接整首曲子。Tango: Maureen 呈現一位風流女子的前男女友，彼此狹路相逢卻同仇敵愾，同時又相互較勁的複雜情感，其中的合音讓人精神大振，頗有一吐為快的舒暢感。What You Own 則是經典搖滾曲風，可說是總結整齣劇的曲目。\n《一個美國人在巴黎》An American in Paris 年輕的心靈漫步在浪漫的花都，是《一個美國人在巴黎》呈現的美好畫面。精緻的芭蕾舞蹈，細膩的光影及優雅的換場將觀眾帶進作曲家 George Gershwin 的巴黎假期。結合了古典、爵士與藍調，An American in Paris 的編曲讓管弦樂團揮灑出一幅水彩畫。Lisa 是男主角為女主角獻唱的邀約定情曲，而 \u0026lsquo;S Wonderful 則表現了三位男士墜入愛河的情懷。三部合音讓三位個性迥異的男主角聚在一塊，三人的各懷心思也在音樂中呈現，其中的口白 \u0026ldquo;What the hell you guys doing in my song?\u0026rdquo; \u0026ldquo;It\u0026rsquo;s MY song!\u0026rdquo; 更令人會心一笑。\n音樂劇為我的生活帶來許多歡樂，也成為讀書研究之餘的一大調劑。非常感謝在中山的時光帶給我接觸音樂劇的機會，讓我探索不一樣的自己，也發掘音樂的更多面向。\nPhoto by Neal Kharawala on Unsplash\n","date":"2020-05-20T00:00:00Z","image":"https://andreashih.com/blog/p/%E9%9F%B3%E6%A8%82%E5%8A%87/chicago_hu8b97adc3fc35662f4f284a273d725233_113889_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/%E9%9F%B3%E6%A8%82%E5%8A%87/","title":"音樂劇"},{"content":"用 rvest 爬資料 將 Mobile01 的 iPhone 板前 1000 頁的貼文標題抓下來。\n參考資料：http://r3dmaotech.blogspot.com/2016/05/r-rvest.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 require(rvest) require(dplyr) # Mobile 01 website links links \u0026lt;- paste0(\u0026#34;https://www.mobile01.com/topiclist.php?f=383\u0026amp;p=\u0026#34;, 1:1000) data \u0026lt;- c() for(i in 1:length(links)){ url \u0026lt;- links[i] content \u0026lt;- read_html(url) %\u0026gt;% html_nodes(\u0026#34;.u-ellipsis\u0026#34;) %\u0026gt;% html_text() temp \u0026lt;- iconv(content,\u0026#39;utf8\u0026#39;) data \u0026lt;- c(data, temp) ##sleep time Sys.sleep(runif(1, 0.5, 0.8)) } titles \u0026lt;- data[seq(1, length(data), by = 3)] # Omit NAs titles \u0026lt;- titles[!is.na(titles)] 寫好 regex 備用 先將可以抓出標題中各型號 iPhone 的 regex 寫好。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 i6S \u0026lt;- \u0026#34;[iI](PHONE|Phone|phone)? ?(6s|6S)(?! ?[pP])\u0026#34; i6SPlus \u0026lt;- \u0026#34;[iI](PHONE|Phone|phone)? ?(6s|6S) ?(PLUS|Plus|plus)\u0026#34; iSE \u0026lt;- \u0026#34;[iI](PHONE|Phone|phone)? ?(SE|se)(?! ?2)\u0026#34; i7 \u0026lt;- \u0026#34;[iI](PHONE|Phone|phone)? ?7(?! ?[pP])\u0026#34; i7Plus \u0026lt;- \u0026#34;[iI](PHONE|Phone|phone)? ?7 ?(PLUS|Plus|plus)\u0026#34; i8 \u0026lt;- \u0026#34;[iI](PHONE|Phone|phone)? ?8(?! ?[pP])\u0026#34; i8Plus \u0026lt;- \u0026#34;[iI](PHONE|Phone|phone)? ?8 ?(PLUS|Plus|plus)\u0026#34; iX \u0026lt;- \u0026#34;[iI](PHONE|Phone|phone)? ?[xX](?! ?[sS])(?! ?[rR])\u0026#34; iXS \u0026lt;- \u0026#34;[iI](PHONE|Phone|phone)? ?(XS|Xs|xs)(?! ?[mM])\u0026#34; iXSMax \u0026lt;- \u0026#34;[iI](PHONE|Phone|phone)? ?(XS|Xs|xs) ?(MAX|Max|max)\u0026#34; iXR \u0026lt;- \u0026#34;[iI](PHONE|Phone|phone)? ?(XR|Xr|xr)\u0026#34; i11 \u0026lt;- \u0026#34;[iI](PHONE|Phone|phone)? ?(11) ?(?! ?[pP])\u0026#34; i11Pro \u0026lt;- \u0026#34;[iI](PHONE|Phone|phone)? ?(11) ?(PRO|Pro|pro)(?! ?[mM])\u0026#34; i11ProMax \u0026lt;- \u0026#34;[iI](PHONE|Phone|phone)? ?(11) ?(PRO|Pro|pro) ?(MAX|Max|max)\u0026#34; i9_SE2 \u0026lt;- \u0026#34;[iI](PHONE|Phone|phone)? ?(9| ?(SE2|Se2|se2))\u0026#34; iphones \u0026lt;- c(i6S, i6SPlus, iSE, i7, i7Plus, i8, i8Plus, iX, iXS, iXSMax, iXR, i11, i11Pro, i11ProMax, i9_SE2) 使用 stringr 找出 iPhone 各型號分別有幾篇討論。\n1 2 3 4 5 6 7 library(stringr) iphones_in_posts \u0026lt;- c() for (i in seq_along(iphones)){ iphone_in_posts \u0026lt;- sum(str_detect(titles, iphones[i])) iphones_in_posts[i] \u0026lt;- iphone_in_posts } 製作表格 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 library(tibble) df \u0026lt;- tibble(Model= c(\u0026#34;i6S\u0026#34;, \u0026#34;i6S Plus\u0026#34;, \u0026#34;iPhone SE\u0026#34;, \u0026#34;i7\u0026#34;, \u0026#34;i7 Plus\u0026#34;, \u0026#34;i8\u0026#34;, \u0026#34;i8 Plus\u0026#34;, \u0026#34;iX\u0026#34;, \u0026#34;iXS\u0026#34;, \u0026#34;iXS Max\u0026#34;, \u0026#34;iXR\u0026#34;, \u0026#34;i11\u0026#34;, \u0026#34;i11 Pro\u0026#34;, \u0026#34;i11 Pro Max\u0026#34;, \u0026#34;i9/SE2\u0026#34;), n = iphones_in_posts) df \u0026lt;- df %\u0026gt;% mutate(Order = 1:n()) %\u0026gt;% arrange(desc(n)) df ## # A tibble: 15 x 3 ## Model n Order ## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; ## 1 iX 1874 8 ## 2 i7 1813 4 ## 3 i6S 1442 1 ## 4 i8 988 6 ## 5 i7 Plus 767 5 ## 6 i11 466 12 ## 7 i8 Plus 406 7 ## 8 i6S Plus 403 2 ## 9 iXR 403 11 ## 10 iXS Max 385 10 ## 11 iXS 336 9 ## 12 iPhone SE 334 3 ## 13 i11 Pro 182 13 ## 14 i11 Pro Max 150 14 ## 15 i9/SE2 30 15 Visualization 1 2 3 4 5 6 7 library(ggplot2) ggplot(df, aes(x = reorder(Model, -n), y = n)) + geom_bar(stat = \u0026#34;identity\u0026#34;, fill = \u0026#34;#fcba03\u0026#34;) + xlab(\u0026#34;Model\u0026#34;) + theme(axis.text.x=element_text(angle=45, hjust=1)) 1 2 3 4 5 6 7 require(ggrepel) ggplot(df, aes(x = n, y = Order, label = Model)) + geom_point(aes(color = factor(Model))) + theme_bw() + geom_text_repel() + theme(legend.position = \u0026#34;none\u0026#34;) Explanation 從 Mobile01 爬下的前 1000 頁標題資料中可以發現，文章數最多的 iX、i7，以及 i6S 都已經推出一段時間了，所以累積比較多討論。文章數最少的則是最晚推出的 i11 Pro 和 i11 Pro Max，以及預計今年四月中才會發表的 i9 (SE2)。原本預期會看到許多 i9 (SE2) 的討論，但 Mobile 01 上似乎沒有此現象。i6S Plus 和 iPhone SE 雖然是較早期機種，文章數卻比新機少很多，之後預計會爬內文進一步分析。\nPhoto by Arnel Hasanovic on Unsplash\n","date":"2020-04-15T00:00:00Z","image":"https://andreashih.com/blog/p/%E7%94%A8-rvest-%E7%88%AC-mobile01-%E7%9A%84-iphone-%E6%9D%BF/iphone_hu44c3cee9cbdab5dc08f8591ae2271db1_42662_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/%E7%94%A8-rvest-%E7%88%AC-mobile01-%E7%9A%84-iphone-%E6%9D%BF/","title":"用 rvest 爬 Mobile01 的 iPhone 板"},{"content":"Although the word Baroque may sound unfamiliar to people, Baroque music exists in our daily life from commercials to movies. The elaborate Baroque music features the use of counterpoint, which refers to the musical technique of playing two or more independent lines of music simultaneously. Among the talented composers in the Baroque period, Bach and Handel were the most influential ones. Their works contributed to the establishment of Baroque music, and both of them were praised as the leading composers of the Baroque era. Though they shared similarities in music achievement, they had different experiences throughout their journeys of music.\nFamilies of Bach and Handel held different opinions about music. The two prominent musicians showed their gift in music at a young age. As for Bach, being born into a great musical family, he inherited talent from his father, who was the leader of the town musicians. Being exposed to music every day, Bach was destined to be a musician. Besides, he received support from his family on the study of music. Handel, though possessed remarkable talent, was forbidden to learn music since his father expected him to be a lawyer. However, Handel didn’t abandon his calling of being a composer. At the age of seven, he finally convinced his father to let him learn music since he inspired Duke Adolf by skilled performance. With persistence and passion for music, Handel successfully became a composer.\nTo distinguish their masterpieces, audiences should pay attention to the styles of music. The compositions of Bach were solemn and antique, whereas Handel’s music was lively and modern. When it comes to composing, Bach preferred instrumental forms. He was specialized in composing organ pieces and concertos. The Brandenburg Concertos and the Goldberg Variations were his most renowned works. However, Bach didn’t write any operas. In comparison, Handel focused on vocal forms. \u0026ldquo;Hallelujah\u0026rdquo; chorus in his oratorio Messiah has been a household melody. Bach’s works mainly focused on indoor pieces. By contrast, Handel composed some outdoor festival suites such as Water Music and Music for the Royal Fireworks.\nAlthough both of them were outstanding figures of Baroque music, Bach and Handel didn’t enjoy the same fame at their time. Bach was not widely recognized as a composer until his works were studied after his death. As a restrained musician, Bach stayed in Germany for his whole life. Conversely, Handel traveled everywhere and made acquaintance with other brilliant musicians abroad. The reputation of Handel rose markedly since his work was appreciated by the king. In addition, his operas were highly acclaimed by the audiences. These advantages made Handel a more renowned composer than Bach.\nWhen listening to the organ music of Bach, audiences can receive a sense of solemnity. When appreciating suites of Handel, audiences will find the music courtly and gorgeous. Bach, though possessed overall musical technique, couldn’t achieve the fame that Handel owned. Furthermore, Handel lived a more affluent life than Bach, and he was one of a few long-lived musicians. The two significant figures wrote a splendid page of Baroque music jointly. Their compositions also cast a long shadow on the history of classical music. People today can indulge themselves in the Baroque atmosphere by admiring their works. Nowadays, the elaboration of their music is still widely researched, and they will be remembered as the most influential composers in the Baroque period.\nPhoto by Calin Draganescu on Unsplash\n","date":"2020-02-21T00:00:00Z","image":"https://andreashih.com/blog/p/bach-and-handel-in-the-baroque-period/violin_hu42e2d727d7ae632db06939c13f64982d_109445_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/bach-and-handel-in-the-baroque-period/","title":"Bach and Handel in the Baroque Period"},{"content":"緣起 這個部落格誕生於 2020 年 2 月，在我碩士一年級的寒假。原本不覺得自己有辦法做出一個部落格，一方面缺乏實作經驗，另一方面我並不擅長寫文章。然而在寒假的某天，當我一如往常打開電腦點進 YouTube 時，看到了這部影片。它清楚的步驟介紹讓我有了「我也可以做到！」的錯覺。為什麼說是錯覺呢？因為接下來實作的過程中可說是困難重重，我費了一番心力才完成網頁架設及整理。當我對製作部落格還存有顧慮時，意外地讀到了 GitHub 創辦人之一 Tom Preston-Werner 所寫的文章。內容實在太感人又有說服力了！因此加強了實作部落格的動機。\n熟悉了製作 GitHub Pages 的流程後，我另外建立了 Homepage，並將部落格連結到 Homepage 上。架設網站的主要目的是記錄自己在研究所期間所累積的成果，並留下曾經努力過的足跡。\n以下的步驟說明我如何網路上開闢一片疆土。筆者使用之電腦為 Windows 系統，故將以在 Windows 上的做法為例。若內容有任何需要修改的地方，歡迎在文章下方留言，或寫信告訴我。\nPreparation GitHub 帳號 在開始之前，必須先創一個 GitHub 帳號。\n檢查電腦中是否已載有 Ruby 可以先在 command line 上輸入 ruby -v 檢查電腦中是否已經載有 Ruby。如果沒有，請跳到步驟 3。若電腦中已有 Ruby，將會回傳它的版本號碼。\n接著，輸入 gem -v 檢查 RubyGems。如果很幸運地兩個 command 都成功了，請輸入 sudo gem install jekyll 開始安裝 Jekyll。\n最後，輸入 jekyll -v 檢查 Jekyll 是否安裝成功。\n資料來源\n下載 Ruby 請前往 RubyInstaller，並點選 Ruby+Devkit 2.6.5-1 (x64) 開始下載。（我第一次下載了 Ruby+Devkit 2.7.0-1 (x64) ，但後來版本不相容無法運作）。\n執行下載時 RubyInstaller 會打開一個 command prompt，安裝時請遵照 default options，如此一來就會成功了。\n最後，請輸入 ridk install 以完成最後一個步驟。\n安裝 Jekyll 請打開一個新的 command prompt，並輸入gem install jekyll bundler。接著，輸入 jekyll -v 檢查是否安裝成功。\n如果電腦上有 Windows Subsystem for Linux，請參考 Jekyll on Windows 裡詳細的安裝步驟。\nWindows 電腦特別會有 Timezone 的問題，Jekyll on Windows 也提供了解決辦法。\nGet Your Hands Dirty 接下來的步驟是參考這部影片撰寫而成。\nJekyll Themes 到 Jekyll Themes 上挑選一個喜歡的模板。點進縮圖後可以點選 Demo 進行預覽。\n決定模版之後，點選 Homepage，進入模板的 repo (repository)。以下將以本部落格的模板 Lagrange 為例進行說明。\nRepository Settings 進入模板的 repo 後，請點選右側的 Fork，將模板複製到自己的 repo。此時畫面中，repo 的名字會變成 你的帳號/Lagrange。\n接著要更改 4 個設定。\n(1) 將左方的 Branch 設為 Master。如果下拉式選單中沒有這個選項，在搜尋欄位中打 \u0026ldquo;Master\u0026rdquo; 就可以搜尋到了。\n(2) 在右方 Settings 中點選左側的 Branches，將 Default branch 設定為 Master。請記得點選 Update 以完成變更。\n(3) 在 Settings 中點選左方的 Options，將 Repository name 設定為你的帳號.github.io。也可以設定別的名字，但最後 GitHub Page 的網址會長得不一樣，可以改改看。\n(4) 滑到頁面下方，看到 GitHub Pages 的欄位後停下來，把 Source 改成 master branch。上方的網址就是新建立的部落格的網址，如果點進去顯示 404，可能要稍後片刻（我曾經等過 20 分鐘）。\nGitHub Desktop 安裝 GitHub Desktop 並完成設定。\n回到自己的 repo，點選右側綠色的 Clone or download，再點選 Open in Desktop，repo 中的內容就會下載到自己的電腦上新增一個資料夾。同時 GitHub Desktop 中左上角的 Current Repository 會顯示自己的 repo 名稱。在電腦上對資料夾中檔案進行的修改會顯示在 GitHub Desktop 上。\nLocal Installation 在 command prompt 中 cd 到資料夾，再輸入 bundle install。接著，輸入 bundle exec jekyll serve，就可以在瀏覽器上輸入 localhost:4000 進行預覽。（有時須依照 command prompt 出現的提示加新指令到資料夾裡的 Gemfile 中。）\n我的 Windows 電腦曾遇過數次 TZInfo::DataSourceNotFound 錯誤訊息。此時只要在 Gemfile 中新增 gem 'tzinfo-data', platforms: [:mingw, :mswin, :x64_mingw]，就可以成功運作。\nPersonalize Your Blog 接著依照 repo 中 README.md 的說明修改各檔案成自己的內容。我使用的編輯器是 Visual Studio Code。介面右方可以開啟 markdown preview，覺得很方便！在編輯過程中，與其直接刪除不需要執行的 lines ，在它們前面加上 # 對我來說是比較保險的做法。\n修改完並儲存後，重新整理 localhost:4000，就可以看到更新的內容。根據我的經驗，_config.yml 需花費較長時間更新。\n回到 GitHub Desktop，輸入 Summary 後，點選左下角 Commit to master，再點選右上角的 Fetch origin，就可以將更新的檔案上傳到 GitHub 中的 repo，以更新正式的網頁。\nAnd That\u0026rsquo;s It! 接下來就可以開開心心地用 Markdown 撰寫內文了！如果要預覽 blog，可以依照 4. Local Installation 的方法執行，但不需要再 run 一次 bundle install。\n上述過程讓我感受最深的是，你必須試了才知道結果會如何。不知道怎麼做就試一下，再依結果去調整。不斷地找到問題，再不斷地解決問題，我認為這就是學習新事物困難但有趣的地方。\nPhoto by Jess Bailey on Unsplash\n","date":"2020-02-20T00:00:00Z","image":"https://andreashih.com/blog/p/a-blog-is-born-%E4%B8%80%E5%80%8B%E9%83%A8%E8%90%BD%E6%A0%BC%E7%9A%84%E8%AA%95%E7%94%9F/blog_hu04195aac68245c49b515618716137980_98385_120x120_fill_q75_box_smart1.jpg","permalink":"https://andreashih.com/blog/p/a-blog-is-born-%E4%B8%80%E5%80%8B%E9%83%A8%E8%90%BD%E6%A0%BC%E7%9A%84%E8%AA%95%E7%94%9F/","title":"A Blog is Born: 一個部落格的誕生"}]